--- a/ca/spottedleaf/moonrise/patches/starlight/light/SWMRNibbleArray.java
+++ b/ca/spottedleaf/moonrise/patches/starlight/light/SWMRNibbleArray.java
@@ -22,12 +_,24 @@
     protected static final int INIT_STATE_INIT   = 2; // initialised
     protected static final int INIT_STATE_HIDDEN = 3; // initialised, but conversion to Vanilla data should be treated as if NULL
 
+    // cookie start - Optimize chunkUnload
+    private volatile boolean cachedIsAllZero = false;
+    private boolean cachedIsAllZeroValid = false;
+
+    private static final ThreadLocal<SaveState[]> SAVE_STATE_CACHE = ThreadLocal.withInitial(() -> new SaveState[4]);
+
     public static final int ARRAY_SIZE = 16 * 16 * 16 / (8/4); // blocks / bytes per block
     // this allows us to maintain only 1 byte array when we're not updating
-    static final ThreadLocal<ArrayDeque<byte[]>> WORKING_BYTES_POOL = ThreadLocal.withInitial(ArrayDeque::new);
+    static final ThreadLocal<ArrayDeque<byte[]>> WORKING_BYTES_POOL = ThreadLocal.withInitial(() -> {
+        return new ArrayDeque<>(8); // Limit pool size to avoid memory leaks
+    });
+    // cookie end - Optimize chunkUnload
 
     private static byte[] allocateBytes() {
-        final byte[] inPool = WORKING_BYTES_POOL.get().pollFirst();
+        // cookie start - Optimize chunkUnload
+        final ArrayDeque<byte[]> queue = WORKING_BYTES_POOL.get();
+        final byte[] inPool = queue.pollFirst();
+        // cookie end - Optimize chunkUnload
         if (inPool != null) {
             return inPool;
         }
@@ -36,7 +_,12 @@
     }
 
     private static void freeBytes(final byte[] bytes) {
-        WORKING_BYTES_POOL.get().addFirst(bytes);
+        // cookie start - Optimize chunkUnload
+        final ArrayDeque<byte[]> queue = WORKING_BYTES_POOL.get();
+        if (queue.size() < 8) {  // Limit pool size to prevent memory leaks
+            queue.addFirst(bytes);
+        }
+        // cookie end - Optimize chunkUnload
     }
 
     public static SWMRNibbleArray fromVanilla(final DataLayer nibble) {
@@ -131,15 +_,44 @@
     public SaveState getSaveState() {
         synchronized (this) {
             final int state = this.stateVisible;
-            final byte[] data = this.storageVisible;
             if (state == INIT_STATE_NULL) {
                 return null;
             }
             if (state == INIT_STATE_UNINIT) {
-                return new SaveState(null, state);
-            }
-            final boolean zero = isAllZero(data);
+                // cookie start - Optimize chunkUnload
+                // Use array-based cache instead of WeakHashMap
+                SaveState[] cache = SAVE_STATE_CACHE.get();
+                SaveState cachedState = cache[INIT_STATE_UNINIT];
+                if (cachedState == null) {
+                    cachedState = new SaveState(null, state);
+                    cache[INIT_STATE_UNINIT] = cachedState;
+                }
+                return cachedState;
+            }
+
+            // Check if we need to test for all zeros
+            final byte[] data = this.storageVisible;
+            boolean zero;
+            if (cachedIsAllZeroValid) {
+                zero = cachedIsAllZero;
+            } else {
+                zero = isAllZero(data);
+                cachedIsAllZero = zero;
+                cachedIsAllZeroValid = true;
+            }
             if (zero) {
+                // Use array-based cache instead of WeakHashMap
+                SaveState[] cache = SAVE_STATE_CACHE.get();
+                int cacheKey = state == INIT_STATE_INIT ? INIT_STATE_UNINIT : -1;
+                if (cacheKey >= 0) {
+                    SaveState cachedState = cache[cacheKey];
+                    if (cachedState == null) {
+                        cachedState = new SaveState(null, cacheKey);
+                        cache[cacheKey] = cachedState;
+                    }
+                    return cachedState;
+                }
+                // cookie end - Optimize chunkUnload
                 return state == INIT_STATE_INIT ? new SaveState(null, INIT_STATE_UNINIT) : null;
             } else {
                 return new SaveState(data.clone(), state);
@@ -148,17 +_,28 @@
     }
 
     protected static boolean isAllZero(final byte[] data) {
-        for (int i = 0; i < (ARRAY_SIZE >>> 4); ++i) {
-            byte whole = data[i << 4];
-
-            for (int k = 1; k < (1 << 4); ++k) {
-                whole |= data[(i << 4) | k];
-            }
-
-            if (whole != 0) {
-                return false;
-            }
-        }
+        // cookie start - Optimize chunkUnload
+        // Check in 8-byte chunks
+        final int longLength = ARRAY_SIZE >>> 3;
+        for (int i = 0; i < longLength; i++) {
+            long value = 0;
+            final int baseIndex = i << 3;
+            // Combine 8 bytes into a long
+            for (int j = 0; j < 8; j++) {
+                value |= ((long) (data[baseIndex + j] & 0xFF)) << (j << 3);
+            }
+            if (value != 0) {
+                return false;
+            }
+        }
+
+        // Check remaining bytes
+        for (int i = longLength << 3; i < ARRAY_SIZE; i++) {
+            if (data[i] != 0) {
+                return false;
+            }
+        }
+        // cookie end - Optimize chunkUnload
 
         return true;
     }
@@ -325,7 +_,7 @@
     }
 
     // operation type: updating
-    public boolean updateVisible() {
+    public synchronized boolean updateVisible() { // cookie - synchronized
         if (!this.isDirty()) {
             return false;
         }
@@ -349,6 +_,7 @@
             }
             this.updatingDirty = false;
             this.stateVisible = this.stateUpdating;
+            this.cachedIsAllZeroValid = false; // cookie - Optimize chunkUnload - Invalidate cache on update
         }
 
         return true;
@@ -424,7 +_,16 @@
         final int shift = (index & 1) << 2;
         final int i = index >>> 1;
 
-        this.storageUpdating[i] = (byte)((this.storageUpdating[i] & (0xF0 >>> shift)) | (value << shift));
+        // cookie start - Optimize chunkUnload
+        byte oldValue = this.storageUpdating[i];
+        byte newValue = (byte)((oldValue & (0xF0 >>> shift)) | (value << shift));
+
+        // Only invalidate cache if the value actually changes
+        if (oldValue != newValue) {
+            this.storageUpdating[i] = newValue;
+            this.cachedIsAllZeroValid = false;
+        }
+        // cookie end - Optimize chunkUnload
     }
 
     public static final class SaveState {
