--- a/net/minecraft/world/level/gameevent/EuclideanGameEventListenerRegistry.java
+++ b/net/minecraft/world/level/gameevent/EuclideanGameEventListenerRegistry.java
@@ -13,7 +_,7 @@
 import net.minecraft.world.phys.Vec3;
 
 public class EuclideanGameEventListenerRegistry implements GameEventListenerRegistry {
-    private final List<GameEventListener> listeners = Lists.newArrayList();
+    private final Set<GameEventListener> listeners = Sets.newConcurrentHashSet(); // cookie
     private final Set<GameEventListener> listenersToRemove = Sets.newHashSet();
     private final List<GameEventListener> listenersToAdd = Lists.newArrayList();
     private boolean processing;
@@ -35,7 +_,7 @@
     @Override
     public void register(GameEventListener listener) {
         if (this.processing) {
-            this.listenersToAdd.add(listener);
+            throw new java.util.ConcurrentModificationException(); // cookie - reduce work done by game event system - Disallow concurrent modification
         } else {
             this.listeners.add(listener);
         }
@@ -46,7 +_,7 @@
     @Override
     public void unregister(GameEventListener listener) {
         if (this.processing) {
-            this.listenersToRemove.add(listener);
+            throw new java.util.ConcurrentModificationException(); // cookie - reduce work done by game event system - Disallow concurrent modification
         } else {
             this.listeners.remove(listener);
         }
@@ -66,7 +_,7 @@
 
             while (iterator.hasNext()) {
                 GameEventListener gameEventListener = iterator.next();
-                if (this.listenersToRemove.remove(gameEventListener)) {
+                if (false) { // cookie - reduce work done by game event system - Disallow concurrent modification
                     iterator.remove();
                 } else {
                     Optional<Vec3> postableListenerPosition = getPostableListenerPosition(this.level, pos, gameEventListener);
@@ -80,6 +_,8 @@
             this.processing = false;
         }
 
+        // cookie start - reduce work done by game event system
+        /*
         if (!this.listenersToAdd.isEmpty()) {
             this.listeners.addAll(this.listenersToAdd);
             this.listenersToAdd.clear();
@@ -89,6 +_,8 @@
             this.listeners.removeAll(this.listenersToRemove);
             this.listenersToRemove.clear();
         }
+        */
+        // cookie end - reduce work done by game event system
 
         return flag;
     }
