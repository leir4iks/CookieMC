--- a/net/minecraft/world/level/block/entity/trialspawner/TrialSpawnerState.java
+++ b/net/minecraft/world/level/block/entity/trialspawner/TrialSpawnerState.java
@@ -173,17 +_,21 @@
     }
 
     private static Optional<Vec3> calculatePositionToSpawnSpawner(ServerLevel level, BlockPos pos, TrialSpawner spawner, TrialSpawnerData spawnerData) {
-        List<Player> list = spawnerData.detectedPlayers
-            .stream()
-            .map(level::getPlayerByUUID)
-            .filter(Objects::nonNull)
-            .filter(
-                player -> !player.isCreative()
-                    && !player.isSpectator()
-                    && player.isAlive()
-                    && player.distanceToSqr(pos.getCenter()) <= Mth.square(spawner.getRequiredPlayerRange())
-            )
-            .toList();
+        // cookie start - Remove stream in trial spawner ticking
+        List<Player> list = new java.util.ArrayList<>();
+
+        for (UUID uuid : spawnerData.detectedPlayers) {
+            Player player = level.getPlayerByUUID(uuid);
+
+            if (player != null
+                && !player.isCreative()
+                && !player.isSpectator()
+                && player.isAlive()
+                && player.distanceToSqr(pos.getCenter()) <= Mth.square(spawner.getRequiredPlayerRange())) {
+                list.add(player);
+            }
+        }
+        // cookie end - Remove stream in trial spawner ticking
         if (list.isEmpty()) {
             return Optional.empty();
         } else {
@@ -203,16 +_,29 @@
 
     @Nullable
     private static Entity selectEntityToSpawnItemAbove(List<Player> player, Set<UUID> currentMobs, TrialSpawner spawner, BlockPos pos, ServerLevel level) {
-        Stream<Entity> stream = currentMobs.stream()
-            .map(level::getEntity)
-            .filter(Objects::nonNull)
-            .filter(entity -> entity.isAlive() && entity.distanceToSqr(pos.getCenter()) <= Mth.square(spawner.getRequiredPlayerRange()));
-        List<? extends Entity> list = level.random.nextBoolean() ? stream.toList() : player;
-        if (list.isEmpty()) {
-            return null;
+        // cookie start - Remove stream in trial spawner ticking
+        if (level.random.nextBoolean()) {
+            List<Entity> list = new java.util.ArrayList<>();
+            for (UUID uuid : currentMobs) {
+                Entity entity = level.getEntity(uuid);
+                if (entity != null && entity.isAlive() && entity.distanceToSqr(pos.getCenter()) <= Mth.square(spawner.getRequiredPlayerRange())) {
+                    list.add(entity);
+                }
+            }
+
+            if (list.isEmpty()) {
+                return null;
+            } else {
+                return list.size() == 1 ? list.getFirst() : Util.getRandom(list, level.random);
+            }
         } else {
-            return list.size() == 1 ? list.getFirst() : Util.getRandom(list, level.random);
+            if (player.isEmpty()) {
+                return null;
+            } else {
+                return player.size() == 1 ? player.getFirst() : Util.getRandom(player, level.random);
+            }
         }
+        // cookie end - Remove stream in trial spawner ticking
     }
 
     private boolean timeToSpawnItemSpawner(ServerLevel level, TrialSpawnerData spawnerData) {
