--- a/net/minecraft/world/level/block/FarmBlock.java
+++ b/net/minecraft/world/level/block/FarmBlock.java
@@ -2,6 +_,7 @@
 
 import com.mojang.serialization.MapCodec;
 import javax.annotation.Nullable;
+import io.cookiemc.cookie.Config;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -41,7 +_,7 @@
 
     protected FarmBlock(BlockBehaviour.Properties properties) {
         super(properties);
-        this.registerDefaultState(this.stateDefinition.any().setValue(MOISTURE, 0));
+        this.registerDefaultState(this.stateDefinition.any().setValue(MOISTURE, Config.INSTANCE.blocks.farmlandAlwaysMoist ? 7 : 0)); // cookie - always moist config
     }
 
     @Override
@@ -95,8 +_,9 @@
     @Override
     protected void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
         int moistureValue = state.getValue(MOISTURE);
-        if (moistureValue > 0 && level.paperConfig().tickRates.wetFarmland != 1 && (level.paperConfig().tickRates.wetFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % level.paperConfig().tickRates.wetFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks
-        if (moistureValue == 0 && level.paperConfig().tickRates.dryFarmland != 1 && (level.paperConfig().tickRates.dryFarmland < 1 || (net.minecraft.server.MinecraftServer.currentTick + pos.hashCode()) % level.paperConfig().tickRates.dryFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks
+        if (Config.INSTANCE.blocks.farmlandAlwaysMoist) return; // cookie - always moist config
+        if (moistureValue > 0 && level.paperConfig().tickRates.wetFarmland != 1 && (level.paperConfig().tickRates.wetFarmland < 1 || (level.getRedstoneGameTime() + pos.hashCode()) % level.paperConfig().tickRates.wetFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks // cookie - Threaded Regions
+        if (moistureValue == 0 && level.paperConfig().tickRates.dryFarmland != 1 && (level.paperConfig().tickRates.dryFarmland < 1 || (level.getRedstoneGameTime() + pos.hashCode()) % level.paperConfig().tickRates.dryFarmland != 0)) { return; } // Paper - Configurable random tick rates for blocks // cookie - Threaded Regions
         if (!isNearWater(level, pos) && !level.isRainingAt(pos.above())) {
             if (moistureValue > 0) {
                 org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(level, pos, state.setValue(MOISTURE, moistureValue - 1), 2); // CraftBukkit
@@ -110,6 +_,7 @@
 
     @Override
     public void fallOn(Level level, BlockState state, BlockPos pos, Entity entity, double fallDistance) {
+        if (Config.INSTANCE.blocks.disableFarmlandTrampling) return; // cookie - disable farmland trampling config
         super.fallOn(level, state, pos, entity, fallDistance); // CraftBukkit - moved here as game rules / events shouldn't affect fall damage.
         if (level instanceof ServerLevel serverLevel
             && (serverLevel.purpurConfig.farmlandTrampleHeight >= 0D ? fallDistance >= serverLevel.purpurConfig.farmlandTrampleHeight : level.random.nextFloat() < fallDistance - 0.5) // Purpur - Configurable farmland trample height
@@ -190,7 +_,10 @@
                 int x = xOff + dx;
                 for (int dy = 0; dy <= 1; ++dy) {
                     int y = dy + yOff;
-                    net.minecraft.world.level.chunk.LevelChunk chunk = (net.minecraft.world.level.chunk.LevelChunk)level.getChunk(x >> 4, z >> 4);
+                    // cookie start - don't call syncload
+                    @Nullable net.minecraft.world.level.chunk.LevelChunk chunk = (net.minecraft.world.level.chunk.LevelChunk)level.getChunkIfLoadedImmediately(x >> 4, z >> 4);
+                    if (chunk == null) continue;
+                    // cookie end
                     net.minecraft.world.level.material.FluidState fluid = chunk.getBlockStateFinal(x, y, z).getFluidState();
                     if (fluid.is(FluidTags.WATER)) {
                         return true;
