--- a/net/minecraft/world/level/dimension/end/EndDragonFight.java
+++ b/net/minecraft/world/level/dimension/end/EndDragonFight.java
@@ -76,7 +_,7 @@
         .setPlayBossMusic(true)
         .setCreateWorldFog(true);
     public final ServerLevel level;
-    private final BlockPos origin;
+    public final BlockPos origin; // cookie - private -> public
     public final ObjectArrayList<Integer> gateways = new ObjectArrayList<>();
     private final BlockPattern exitPortalPattern;
     private int ticksSinceDragonSeen;
@@ -207,6 +_,12 @@
         }
 
         List<? extends EnderDragon> dragons = this.level.getDragons();
+        // cookie start - Threaded Regions
+        // we do not want to deal with any dragons NOT nearby
+        dragons.removeIf((EnderDragon dragon) -> {
+            return !io.cookiemc.cookie.region.ServerRegions.isTickThreadFor(dragon);
+        });
+        // cookie end
         if (dragons.isEmpty()) {
             this.dragonKilled = true;
         } else {
@@ -322,8 +_,8 @@
 
             for (int i = -8 + chunkPos.x; i <= 8 + chunkPos.x; i++) {
                 for (int i1 = 8 + chunkPos.z; i1 <= 8 + chunkPos.z; i1++) {
-                    ChunkAccess chunk = this.level.getChunk(i, i1, ChunkStatus.FULL, false);
-                    if (!(chunk instanceof LevelChunk)) {
+                    ChunkAccess chunk = this.level.getChunkIfLoaded(i, i1); // cookie - Threaded Regions
+                    if (!(chunk instanceof LevelChunk) || !io.cookiemc.cookie.region.ServerRegions.isTickThreadFor(this.level, i, i1, this.level.regioniser.regionSectionChunkSize)) { // cookie - Threaded Regions
                         return false;
                     }
 
@@ -433,7 +_,7 @@
             .registryAccess()
             .lookup(Registries.CONFIGURED_FEATURE)
             .flatMap(registry -> registry.get(EndFeatures.END_GATEWAY_DELAYED))
-            .ifPresent(endGatewayFeature -> endGatewayFeature.value().place(this.level, this.level.getChunkSource().getGenerator(), RandomSource.create(), pos));
+            .ifPresent(endGatewayFeature -> endGatewayFeature.value().place(this.level, this.level.getChunkSource().getGenerator(), this.level.random, pos)); // cookie - reduce RandomSource instances
     }
 
     public void spawnExitPortal(boolean active) {
@@ -454,7 +_,7 @@
         }
         // Paper end - Prevent "softlocked" exit portal generation
         if (endPodiumFeature.place(
-            FeatureConfiguration.NONE, this.level, this.level.getChunkSource().getGenerator(), RandomSource.create(), this.portalLocation
+            FeatureConfiguration.NONE, this.level, this.level.getChunkSource().getGenerator(), this.level.random, this.portalLocation // cookie - reduce RandomSource instances
         )) {
             int i = Mth.positiveCeilDiv(4, 16);
             this.level.getChunkSource().chunkMap.waitForLightBeforeSending(new ChunkPos(this.portalLocation), i);
@@ -497,6 +_,11 @@
     }
 
     public void onCrystalDestroyed(EndCrystal crystal, DamageSource dmgSrc) {
+        // cookie start - Threaded Regions
+        if (!io.cookiemc.cookie.region.ServerRegions.isTickThreadFor(this.level, this.origin)) {
+            return;
+        }
+        // cookie end
         if (this.respawnStage != null && this.respawnCrystals.contains(crystal)) {
             LOGGER.debug("Aborting respawn sequence");
             this.respawnStage = null;
@@ -522,7 +_,7 @@
 
     public boolean tryRespawn(@Nullable BlockPos placedEndCrystalPos) { // placedEndCrystalPos is null if the tryRespawn() call was not caused by a placed end crystal
         // Paper end - Perf: Do crystal-portal proximity check before entity lookup
-        if (this.dragonKilled && this.respawnStage == null) {
+        if (this.dragonKilled && this.respawnStage == null && io.cookiemc.cookie.region.ServerRegions.isTickThreadFor(this.level, this.origin)) { // cookie - Threaded Regions
             BlockPos blockPos = this.portalLocation;
             if (blockPos == null) {
                 LOGGER.debug("Tried to respawn, but need to find the portal first.");
