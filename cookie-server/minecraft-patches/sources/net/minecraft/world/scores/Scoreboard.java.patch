--- a/net/minecraft/world/scores/Scoreboard.java
+++ b/net/minecraft/world/scores/Scoreboard.java
@@ -38,11 +_,11 @@
     private final Object2ObjectMap<String, PlayerTeam> teamsByPlayer = new Object2ObjectOpenHashMap<>();
 
     @Nullable
-    public Objective getObjective(@Nullable String name) {
+    public synchronized Objective getObjective(@Nullable String name) { // cookie - synchronized
         return this.objectivesByName.get(name);
     }
 
-    public Objective addObjective(
+    public synchronized Objective addObjective( // cookie - synchronized
         String name,
         ObjectiveCriteria criteria,
         Component displayName,
@@ -61,7 +_,7 @@
         }
     }
 
-    public final void forAllObjectives(ObjectiveCriteria criteria, ScoreHolder scoreHolder, Consumer<ScoreAccess> action) {
+    public synchronized final void forAllObjectives(ObjectiveCriteria criteria, ScoreHolder scoreHolder, Consumer<ScoreAccess> action) { // cookie - synchronized
         this.objectivesByCriteria
             .getOrDefault(criteria, Collections.emptyList())
             .forEach(objective -> action.accept(this.getOrCreatePlayerScore(scoreHolder, objective, true)));
@@ -71,11 +_,11 @@
         return this.playerScores.computeIfAbsent(username, string -> new PlayerScores());
     }
 
-    public ScoreAccess getOrCreatePlayerScore(ScoreHolder scoreHolder, Objective objective) {
+    public synchronized ScoreAccess getOrCreatePlayerScore(ScoreHolder scoreHolder, Objective objective) { // cookie - synchronized
         return this.getOrCreatePlayerScore(scoreHolder, objective, false);
     }
 
-    public ScoreAccess getOrCreatePlayerScore(final ScoreHolder scoreHolder, final Objective objective, boolean readOnly) {
+    public synchronized ScoreAccess getOrCreatePlayerScore(final ScoreHolder scoreHolder, final Objective objective, boolean readOnly) { // cookie - synchronized
         final boolean flag = readOnly || !objective.getCriteria().isReadOnly();
         PlayerScores playerInfo = this.getOrCreatePlayerInfo(scoreHolder.getScoreboardName());
         final MutableBoolean mutableBoolean = new MutableBoolean();
@@ -163,12 +_,12 @@
     }
 
     @Nullable
-    public ReadOnlyScoreInfo getPlayerScoreInfo(ScoreHolder scoreHolder, Objective objective) {
+    public synchronized ReadOnlyScoreInfo getPlayerScoreInfo(ScoreHolder scoreHolder, Objective objective) { // cookie - synchronized
         PlayerScores playerScores = this.playerScores.get(scoreHolder.getScoreboardName());
         return playerScores != null ? playerScores.get(objective) : null;
     }
 
-    public Collection<PlayerScoreEntry> listPlayerScores(Objective objective) {
+    public synchronized Collection<PlayerScoreEntry> listPlayerScores(Objective objective) { // cookie - synchronized
         List<PlayerScoreEntry> list = new ArrayList<>();
         this.playerScores.forEach((string, playerScores) -> {
             Score score = playerScores.get(objective);
@@ -179,26 +_,26 @@
         return list;
     }
 
-    public Collection<Objective> getObjectives() {
+    public synchronized Collection<Objective> getObjectives() { // cookie - synchronized
         return this.objectivesByName.values();
     }
 
-    public Collection<String> getObjectiveNames() {
+    public synchronized Collection<String> getObjectiveNames() { // cookie - synchronized
         return this.objectivesByName.keySet();
     }
 
-    public Collection<ScoreHolder> getTrackedPlayers() {
+    public synchronized Collection<ScoreHolder> getTrackedPlayers() { // cookie - synchronized
         return this.playerScores.keySet().stream().map(ScoreHolder::forNameOnly).toList();
     }
 
-    public void resetAllPlayerScores(ScoreHolder scoreHolder) {
+    public synchronized void resetAllPlayerScores(ScoreHolder scoreHolder) { // cookie - synchronized
         PlayerScores playerScores = this.playerScores.remove(scoreHolder.getScoreboardName());
         if (playerScores != null) {
             this.onPlayerRemoved(scoreHolder);
         }
     }
 
-    public void resetSinglePlayerScore(ScoreHolder scoreHolder, Objective objective) {
+    public synchronized void resetSinglePlayerScore(ScoreHolder scoreHolder, Objective objective) { // cookie - synchronized
         PlayerScores playerScores = this.playerScores.get(scoreHolder.getScoreboardName());
         if (playerScores != null) {
             boolean flag = playerScores.remove(objective);
@@ -213,12 +_,12 @@
         }
     }
 
-    public Object2IntMap<Objective> listPlayerScores(ScoreHolder scoreHolder) {
+    public synchronized Object2IntMap<Objective> listPlayerScores(ScoreHolder scoreHolder) { // cookie - synchronized
         PlayerScores playerScores = this.playerScores.get(scoreHolder.getScoreboardName());
         return playerScores != null ? playerScores.listScores() : Object2IntMaps.emptyMap();
     }
 
-    public void removeObjective(Objective objective) {
+    public synchronized void removeObjective(Objective objective) { // cookie - synchronized
         this.objectivesByName.remove(objective.getName());
 
         for (DisplaySlot displaySlot : DisplaySlot.values()) {
@@ -239,21 +_,21 @@
         this.onObjectiveRemoved(objective);
     }
 
-    public void setDisplayObjective(DisplaySlot slot, @Nullable Objective objective) {
+    public synchronized void setDisplayObjective(DisplaySlot slot, @Nullable Objective objective) { // cookie - synchronized
         this.displayObjectives.put(slot, objective);
     }
 
     @Nullable
-    public Objective getDisplayObjective(DisplaySlot slot) {
+    public synchronized Objective getDisplayObjective(DisplaySlot slot) { // cookie - synchronized
         return this.displayObjectives.get(slot);
     }
 
     @Nullable
-    public PlayerTeam getPlayerTeam(String teamName) {
+    public synchronized PlayerTeam getPlayerTeam(String teamName) { // cookie - synchronized
         return this.teamsByName.get(teamName);
     }
 
-    public PlayerTeam addPlayerTeam(String name) {
+    public synchronized PlayerTeam addPlayerTeam(String name) { // cookie - synchronized
         PlayerTeam playerTeam = this.getPlayerTeam(name);
         if (playerTeam != null) {
             LOGGER.warn("Requested creation of existing team '{}'", name);
@@ -266,7 +_,7 @@
         }
     }
 
-    public void removePlayerTeam(PlayerTeam playerTeam) {
+    public synchronized void removePlayerTeam(PlayerTeam playerTeam) { // cookie - synchronized
         this.teamsByName.remove(playerTeam.getName());
 
         for (String string : playerTeam.getPlayers()) {
@@ -276,7 +_,7 @@
         this.onTeamRemoved(playerTeam);
     }
 
-    public boolean addPlayerToTeam(String playerName, PlayerTeam team) {
+    public synchronized boolean addPlayerToTeam(String playerName, PlayerTeam team) { // cookie - synchronized
         if (this.getPlayersTeam(playerName) != null) {
             this.removePlayerFromTeam(playerName);
         }
@@ -285,7 +_,7 @@
         return team.getPlayers().add(playerName);
     }
 
-    public boolean removePlayerFromTeam(String playerName) {
+    public synchronized boolean removePlayerFromTeam(String playerName) { // cookie - synchronized
         PlayerTeam playersTeam = this.getPlayersTeam(playerName);
         if (playersTeam != null) {
             this.removePlayerFromTeam(playerName, playersTeam);
@@ -295,7 +_,7 @@
         }
     }
 
-    public void removePlayerFromTeam(String username, PlayerTeam playerTeam) {
+    public synchronized void removePlayerFromTeam(String username, PlayerTeam playerTeam) { // cookie - synchronized
         if (this.getPlayersTeam(username) != playerTeam) {
             throw new IllegalStateException("Player is either on another team or not on any team. Cannot remove from team '" + playerTeam.getName() + "'.");
         } else {
@@ -304,16 +_,16 @@
         }
     }
 
-    public Collection<String> getTeamNames() {
+    public synchronized Collection<String> getTeamNames() { // cookie - synchronized
         return this.teamsByName.keySet();
     }
 
-    public Collection<PlayerTeam> getPlayerTeams() {
+    public synchronized Collection<PlayerTeam> getPlayerTeams() { // cookie - synchronized
         return this.teamsByName.values();
     }
 
     @Nullable
-    public PlayerTeam getPlayersTeam(String username) {
+    public synchronized PlayerTeam getPlayersTeam(String username) { // cookie - synchronized
         return this.teamsByPlayer.get(username);
     }
 
@@ -347,7 +_,7 @@
     public void onTeamRemoved(PlayerTeam playerTeam) {
     }
 
-    public void entityRemoved(Entity entity) {
+    public synchronized void entityRemoved(Entity entity) { // cookie - synchronized
         if (!(entity instanceof Player) && !entity.isAlive()) {
             this.resetAllPlayerScores(entity);
             this.removePlayerFromTeam(entity.getScoreboardName());
