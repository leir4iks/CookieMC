--- a/net/minecraft/world/entity/ai/goal/LlamaFollowCaravanGoal.java
+++ b/net/minecraft/world/entity/ai/goal/LlamaFollowCaravanGoal.java
@@ -20,16 +_,79 @@
         this.setFlags(EnumSet.of(Goal.Flag.MOVE));
     }
 
+    // cookie start - Async target finding
+    private @javax.annotation.Nullable Llama poll() {
+        if (!(this.llama.getGoalCtx().result() instanceof Llama target)) return null;
+        var serverLevel = getServerLevel(this.llama);
+        if (serverLevel == null || !target.isAlive()) return null;
+        return target;
+    }
+
+    private void findTargetAsync() {
+        final Llama llama = this.llama;
+        final var ctx = llama.getGoalCtx();
+        if (!ctx.state) return;
+        final var bound = llama.getBoundingBox().inflate(9.0, 4.0, 9.0);
+        final var serverLevel = getServerLevel(llama);
+        final var pos = llama.position();
+        ctx.wake = () -> {
+            List<Entity> entities = serverLevel.getEntities(llama, bound, entity1 -> {
+                EntityType<?> type = entity1.getType();
+                return type == EntityType.LLAMA || type == EntityType.TRADER_LLAMA;
+            });
+            Llama target = null;
+            double d = Double.MAX_VALUE;
+
+            for (Entity entity : entities) {
+                Llama llama1 = (Llama) entity;
+                if (llama1.inCaravan() && !llama1.hasCaravanTail()) {
+                    double d1 = llama1.distanceToSqr(pos);
+                    if (!(d1 > d)) {
+                        d = d1;
+                        target = llama1;
+                    }
+                }
+            }
+
+            if (target == null) {
+                for (Entity entityx : entities) {
+                    Llama llama1 = (Llama) entityx;
+                    if (llama1.isLeashed() && !llama1.hasCaravanTail()) {
+                        double d1 = llama1.distanceToSqr(pos);
+                        if (!(d1 > d)) {
+                            d = d1;
+                            target = llama1;
+                        }
+                    }
+                }
+            }
+            return target;
+        };
+    }
+    // cookie end - Async target finding
+
     @Override
     public boolean canUse() {
         if (!this.llama.level().purpurConfig.llamaJoinCaravans || !this.llama.shouldJoinCaravan) return false; // Purpur - Llama API // Purpur - Config to disable Llama caravans
         if (!this.llama.isLeashed() && !this.llama.inCaravan()) {
+            // cookie start - Async target finding
+            Llama llama = poll();
+            double d = Double.MAX_VALUE;
+            if (io.cookiemc.cookie.Config.INSTANCE.entities.asyncTargetFinding.searchEntity) {
+                if (llama == null) {
+                    findTargetAsync();
+                    return false;
+                } else {
+                    d = this.llama.distanceToSqr(llama);
+                }
+            } else {
+            // cookie end - Async target finding
             List<Entity> entities = this.llama.level().getEntities(this.llama, this.llama.getBoundingBox().inflate(9.0, 4.0, 9.0), entity1 -> {
                 EntityType<?> type = entity1.getType();
                 return type == EntityType.LLAMA || type == EntityType.TRADER_LLAMA;
             });
-            Llama llama = null;
-            double d = Double.MAX_VALUE;
+            // Llama llama = null; // cookie - Async target finding
+            // double d = Double.MAX_VALUE; // cookie - Async target finding
 
             for (Entity entity : entities) {
                 Llama llama1 = (Llama)entity;
@@ -54,6 +_,7 @@
                     }
                 }
             }
+            } // cookie - Async target finding
 
             if (llama == null) {
                 return false;
