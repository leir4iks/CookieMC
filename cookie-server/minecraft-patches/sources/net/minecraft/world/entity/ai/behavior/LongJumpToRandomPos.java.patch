--- a/net/minecraft/world/entity/ai/behavior/LongJumpToRandomPos.java
+++ b/net/minecraft/world/entity/ai/behavior/LongJumpToRandomPos.java
@@ -6,14 +_,17 @@
 import java.util.List;
 import java.util.Optional;
 import java.util.function.BiPredicate;
+import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+import io.cookiemc.cookie.util.collections.LongJumpChoiceList;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.Mth;
+import net.minecraft.util.RandomSource;
 import net.minecraft.util.random.WeightedRandom;
 import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.entity.Mob;
@@ -119,6 +_,12 @@
         int x = blockPos.getX();
         int y = blockPos.getY();
         int z = blockPos.getZ();
+        // cookie start
+        if (this.maxLongJumpWidth < 128 && this.maxLongJumpHeight < 128) {
+            this.jumpCandidates = LongJumpChoiceList.forCenter(blockPos, (byte) this.maxLongJumpWidth, (byte) this.maxLongJumpHeight);
+            return;
+        }
+        // cookie end
         this.jumpCandidates = BlockPos.betweenClosedStream(
                 x - this.maxLongJumpWidth,
                 y - this.maxLongJumpHeight,
@@ -175,12 +_,26 @@
     }
 
     protected Optional<LongJumpToRandomPos.PossibleJump> getJumpCandidate(ServerLevel level) {
-        Optional<LongJumpToRandomPos.PossibleJump> randomItem = WeightedRandom.getRandomItem(
-            level.random, this.jumpCandidates, LongJumpToRandomPos.PossibleJump::weight
-        );
-        randomItem.ifPresent(this.jumpCandidates::remove);
+    // cookie start - optimize impl
+        Optional<LongJumpToRandomPos.PossibleJump> randomItem = getRandomFast(level.random, this.jumpCandidates, LongJumpToRandomPos.PossibleJump::weight);
+        skipRemoveIfAlreadyRemoved(randomItem, this.jumpCandidates::remove);
         return randomItem;
     }
+
+    private Optional<LongJumpToRandomPos.PossibleJump> getRandomFast(RandomSource random, List<LongJumpToRandomPos.PossibleJump> pool, java.util.function.ToIntFunction<LongJumpToRandomPos.PossibleJump> toIntFunction) {
+        if (pool instanceof LongJumpChoiceList longJumpChoiceList) {
+            return Optional.ofNullable(longJumpChoiceList.removeRandomWeightedByDistanceSq(random));
+        } else {
+            return WeightedRandom.getRandomItem(random, pool, toIntFunction);
+        }
+    }
+
+    private void skipRemoveIfAlreadyRemoved(Optional<LongJumpToRandomPos.PossibleJump> result, Consumer<? super LongJumpToRandomPos.PossibleJump> removeAction) {
+        if (!(this.jumpCandidates instanceof LongJumpChoiceList)) {
+            result.ifPresent(removeAction);
+        }
+    }
+    // cookie end
 
     private boolean isAcceptableLandingPosition(ServerLevel level, E entity, BlockPos pos) {
         BlockPos blockPos = entity.blockPosition();
