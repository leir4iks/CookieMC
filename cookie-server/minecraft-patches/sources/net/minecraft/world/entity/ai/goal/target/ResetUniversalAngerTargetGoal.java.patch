--- a/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java
+++ b/net/minecraft/world/entity/ai/goal/target/ResetUniversalAngerTargetGoal.java
@@ -37,6 +_,27 @@
         this.lastHurtByPlayerTimestamp = this.mob.getLastHurtByMobTimestamp();
         this.mob.forgetCurrentTargetAndRefreshUniversalAnger();
         if (this.alertOthersOfSameType) {
+            // cookie start - Async target finding
+            if (io.cookiemc.cookie.Config.INSTANCE.entities.asyncTargetFinding.alertOther) {
+                final var mob = this.mob;
+                final var ctx = mob.getGoalCtx();
+                if (!ctx.state) return;
+                final var serverLevel = getServerLevel(mob);
+                final double followRange = this.mob.getAttributeValue(Attributes.FOLLOW_RANGE);
+                final AABB aabb = AABB.unitCubeFromLowerCorner(this.mob.position()).inflate(followRange, 10.0, followRange);
+                ctx.wake = () -> {
+                    var entities = serverLevel.getEntitiesOfClass(mob.getClass(), aabb, EntitySelector.NO_SPECTATORS);
+                    List<NeutralMob> toStop = new java.util.ArrayList<>(entities.size());
+                    for (Mob entity : entities) {
+                        if (entity != mob) {
+                            toStop.add((NeutralMob) entity);
+                        }
+                    }
+                    return toStop;
+                };
+                return;
+            }
+            // cookie end - Async target finding
             this.getNearbyMobsOfSameType()
                 .stream()
                 .filter(mob -> mob != this.mob)
@@ -46,6 +_,17 @@
 
         super.start();
     }
+
+    // cookie start - Async target finding
+    public void poll() {
+        if (!(this.mob.getGoalCtx().result() instanceof List toStop)) return;
+        for (var neutralMob : toStop) {
+            if (EntitySelector.NO_SPECTATORS.test((net.minecraft.world.entity.Entity) neutralMob)) {
+                ((NeutralMob) neutralMob).forgetCurrentTargetAndRefreshUniversalAnger();
+            }
+        }
+    }
+    // cookie end - Async target finding
 
     private List<? extends Mob> getNearbyMobsOfSameType() {
         double attributeValue = this.mob.getAttributeValue(Attributes.FOLLOW_RANGE);
