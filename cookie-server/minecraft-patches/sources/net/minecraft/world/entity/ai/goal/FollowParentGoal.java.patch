--- a/net/minecraft/world/entity/ai/goal/FollowParentGoal.java
+++ b/net/minecraft/world/entity/ai/goal/FollowParentGoal.java
@@ -19,11 +_,56 @@
         this.speedModifier = speedModifier;
     }
 
+    // cookie start - Async target finding
+    protected boolean poll() {
+        if (!(this.animal.getGoalCtx().result() instanceof Animal target)) return false;
+        var serverLevel = getServerLevel(animal);
+        if (serverLevel == null || !target.isAlive() || animal.distanceToSqr(target) < 9.0) return false;
+        this.parent = animal;
+        return true;
+    }
+
+    private void findTargetAsync() {
+        final Animal animal = this.animal;
+        final var ctx = animal.getGoalCtx();
+        if (!ctx.state) return;
+        final var targetType = animal.getClass();
+        final var bound = animal.getBoundingBox().inflate(8.0, 4.0, 8.0);
+        final var serverLevel = getServerLevel(animal);
+        final var pos = animal.position();
+        ctx.wake = () -> {
+            List<? extends Animal> entitiesOfClass = serverLevel.getEntitiesOfClass(targetType, bound);
+            Animal target = null;
+            double d = Double.MAX_VALUE;
+
+            for (Animal animal1 : entitiesOfClass) {
+                if (animal1.getAge() >= 0) {
+                    double d1 = animal1.distanceToSqr(pos);
+                    if (!(d1 > d)) {
+                        d = d1;
+                        target = animal1;
+                    }
+                }
+            }
+            return target;
+        };
+    }
+    // cookie end - Async target finding
+
     @Override
     public boolean canUse() {
         if (this.animal.getAge() >= 0) {
             return false;
         } else {
+            // cookie start - Async target finding
+            if (poll()) {
+                return true;
+            }
+            if (io.cookiemc.cookie.Config.INSTANCE.entities.asyncTargetFinding.searchEntity) {
+                findTargetAsync();
+                return false;
+            }
+            // cookie end - Async target finding
             List<? extends Animal> entitiesOfClass = this.animal
                 .level()
                 .getEntitiesOfClass((Class<? extends Animal>)this.animal.getClass(), this.animal.getBoundingBox().inflate(8.0, 4.0, 8.0));
