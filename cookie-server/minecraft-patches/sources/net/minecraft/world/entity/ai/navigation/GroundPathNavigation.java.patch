--- a/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
+++ b/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
@@ -24,9 +_,25 @@
         super(mob, level);
     }
 
+    // cookie start - async path processing
+    protected static final io.cookiemc.cookie.entity.pathfinding.NodeEvaluatorGenerator nodeEvaluatorGenerator = (io.cookiemc.cookie.entity.pathfinding.NodeEvaluatorFeatures nodeEvaluatorFeatures) -> {
+        WalkNodeEvaluator nodeEvaluator = new WalkNodeEvaluator();
+        nodeEvaluator.setCanPassDoors(nodeEvaluatorFeatures.canPassDoors());
+        nodeEvaluator.setCanFloat(nodeEvaluatorFeatures.canFloat());
+        nodeEvaluator.setCanWalkOverFences(nodeEvaluatorFeatures.canWalkOverFences());
+        nodeEvaluator.setCanOpenDoors(nodeEvaluatorFeatures.canOpenDoors());
+        return nodeEvaluator;
+    };
+    // cookie end
+
     @Override
     protected PathFinder createPathFinder(int maxVisitedNodes) {
         this.nodeEvaluator = new WalkNodeEvaluator();
+        // cookie start - async path processing
+        if (io.cookiemc.cookie.Config.INSTANCE.entities.pathfinding.enableThreadedPathfinding) {
+            return new PathFinder(this.nodeEvaluator, maxVisitedNodes, nodeEvaluatorGenerator);
+        }
+        // cookie end
         return new PathFinder(this.nodeEvaluator, maxVisitedNodes);
     }
 
@@ -42,6 +_,11 @@
 
     @Override
     public Path createPath(BlockPos pos, @javax.annotation.Nullable Entity entity, int accuracy) { // Paper - EntityPathfindEvent
+        // cookie start - Threaded Regions
+        if (!io.cookiemc.cookie.region.ServerRegions.isTickThreadFor(this.level, pos)) {
+            return null;
+        }
+        // cookie end
         LevelChunk chunkNow = this.level.getChunkSource().getChunkNow(SectionPos.blockToSectionCoord(pos.getX()), SectionPos.blockToSectionCoord(pos.getZ()));
         if (chunkNow == null) {
             return null;
