--- a/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
+++ b/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
@@ -60,17 +_,20 @@
                                         poi -> poi.is(PoiTypes.HOME), predicate, mob.blockPosition(), 48, PoiManager.Occupancy.ANY
                                     )
                                     .collect(Collectors.toSet());
+                                // cookie start - Async path processing
+                                if (io.cookiemc.cookie.Config.INSTANCE.entities.pathfinding.enableThreadedPathfinding) {
+                                    // await on path async
+                                    Path possiblePath = AcquirePoi.findPathToPois(mob, set);
+
+                                    // wait on the path to be processed
+                                    io.cookiemc.cookie.entity.pathfinding.AsyncPathProcessor.awaitProcessing(level, possiblePath, path -> { // cookie - Threaded Regions
+                                        processPath(speedModifier, map, mutableLong, walkTarget, level, poiManager, mutableInt, path);
+                                    });
+                                } else {
+                                    // cookie end
                                 Path path = AcquirePoi.findPathToPois(mob, set);
-                                if (path != null && path.canReach()) {
-                                    BlockPos target = path.getTarget();
-                                    Optional<Holder<PoiType>> type = poiManager.getType(target);
-                                    if (type.isPresent()) {
-                                        walkTarget.set(new WalkTarget(target, speedModifier, 1));
-                                        DebugPackets.sendPoiTicketCountPacket(level, target);
-                                    }
-                                } else if (mutableInt.getValue() < 5) {
-                                    map.long2LongEntrySet().removeIf(entry -> entry.getLongValue() < mutableLong.getValue());
-                                }
+                                    processPath(speedModifier, map, mutableLong, walkTarget, level, poiManager, mutableInt, path);
+                                } // cookie - async path processing
 
                                 return true;
                             } else {
@@ -81,4 +_,26 @@
                 )
         );
     }
+
+    // cookie start - cookie - Async path processing
+    private static void processPath(float speedModifier,
+                                    Long2LongMap map,
+                                    MutableLong mutableLong,
+                                    net.minecraft.world.entity.ai.behavior.declarative.MemoryAccessor<com.mojang.datafixers.kinds.Const.Mu<com.mojang.datafixers.util.Unit>, WalkTarget> walkTarget,
+                                    net.minecraft.server.level.ServerLevel level,
+                                    PoiManager poiManager,
+                                    MutableInt mutableInt,
+                                    @org.jetbrains.annotations.Nullable Path path) {
+        if (path != null && path.canReach()) {
+            BlockPos target = path.getTarget();
+            Optional<Holder<PoiType>> type = poiManager.getType(target);
+            if (type.isPresent()) {
+                walkTarget.set(new WalkTarget(target, speedModifier, 1));
+                DebugPackets.sendPoiTicketCountPacket(level, target);
+            }
+        } else if (mutableInt.getValue() < 5) {
+            map.long2LongEntrySet().removeIf(entry -> entry.getLongValue() < mutableLong.getValue());
+        }
+    }
+    // cookie end - cookie - Async path processing
 }
