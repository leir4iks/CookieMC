--- a/net/minecraft/world/entity/ai/sensing/Sensing.java
+++ b/net/minecraft/world/entity/ai/sensing/Sensing.java
@@ -2,40 +_,61 @@
 
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import it.unimi.dsi.fastutil.ints.IntSet;
-import net.minecraft.util.profiling.Profiler;
-import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.Mob;
 
 public class Sensing {
     private final Mob mob;
-    private final IntSet seen = new IntOpenHashSet();
-    private final IntSet unseen = new IntOpenHashSet();
+    private final it.unimi.dsi.fastutil.ints.Int2IntMap seen = new it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap(2); // cookie end - initialize line of sight cache with low capacity
 
     public Sensing(Mob mob) {
         this.mob = mob;
     }
 
     public void tick() {
-        this.seen.clear();
-        this.unseen.clear();
+        // cookie start - Async target finding
+        if (io.cookiemc.cookie.Config.INSTANCE.entities.asyncTargetFinding.enabled) {
+            synchronized (this) {
+                tickInternal();
+            }
+        } else {
+            tickInternal();
+        }
+    }
+
+    private void tickInternal() {
+        // cookie end - Async target finding
+        this.seen.clear(); // cookie - reduce line of sight updates
     }
 
     public boolean hasLineOfSight(Entity entity) {
+        // cookie start - Async target finding
+        if (io.cookiemc.cookie.Config.INSTANCE.entities.asyncTargetFinding.enabled) {
+            synchronized (this) {
+                return hasLineOfSightInternal(entity);
+            }
+        } else {
+            return hasLineOfSightInternal(entity);
+        }
+    }
+
+    private boolean hasLineOfSightInternal(Entity entity) {
+        // cookie end - Async target finding
         int id = entity.getId();
-        if (this.seen.contains(id)) {
+        // cookie start - reduce line of sight cache lookups - merge sets
+        int cached = this.seen.get(id);
+
+        if (cached == 1) {
+            // cookie end - reduce line of sight cache lookups - merge sets
             return true;
-        } else if (this.unseen.contains(id)) {
+        } else if (cached == 2) { // cookie - reduce line of sight cache lookups - merge sets
             return false;
         } else {
-            ProfilerFiller profilerFiller = Profiler.get();
-            profilerFiller.push("hasLineOfSight");
             boolean hasLineOfSight = this.mob.hasLineOfSight(entity);
-            profilerFiller.pop();
             if (hasLineOfSight) {
-                this.seen.add(id);
+                this.seen.put(id, 1); // cookie - reduce line of sight cache lookups - merge sets
             } else {
-                this.unseen.add(id);
+                this.seen.put(id, 2); // cookie - reduce line of sight cache lookups - merge sets
             }
 
             return hasLineOfSight;
