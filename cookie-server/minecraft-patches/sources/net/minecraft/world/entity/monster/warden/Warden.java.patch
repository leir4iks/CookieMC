--- a/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/net/minecraft/world/entity/monster/warden/Warden.java
@@ -31,8 +_,6 @@
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.Unit;
-import net.minecraft.util.profiling.Profiler;
-import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
@@ -303,12 +_,11 @@
         }
     }
 
+    private int behaviorTick = 0; // cookie
     @Override
     protected void customServerAiStep(ServerLevel level) {
-        ProfilerFiller profilerFiller = Profiler.get();
-        profilerFiller.push("wardenBrain");
+        if ((getRider() == null || !this.isControllable()) && this.behaviorTick++ % this.activatedPriority == 0) // cookie - DAB
         this.getBrain().tick(level, this);
-        profilerFiller.pop();
         super.customServerAiStep(level);
         if ((this.tickCount + this.getId()) % 120 == 0) {
             applyDarknessAround(level, this.position(), this, 20);
@@ -583,6 +_,16 @@
             @Override
             protected PathFinder createPathFinder(int maxVisitedNodes) {
                 this.nodeEvaluator = new WalkNodeEvaluator();
+                // cookie start - async path processing
+                if (io.cookiemc.cookie.Config.INSTANCE.entities.pathfinding.enableThreadedPathfinding) {
+                    return new PathFinder(this.nodeEvaluator, maxVisitedNodes, GroundPathNavigation.nodeEvaluatorGenerator) {
+                        @Override
+                        protected float distance(Node first, Node second) {
+                            return first.distanceToXZ(second);
+                        }
+                    };
+                }
+                // cookie end
                 return new PathFinder(this.nodeEvaluator, maxVisitedNodes) {
                     @Override
                     protected float distance(Node first, Node second) {
