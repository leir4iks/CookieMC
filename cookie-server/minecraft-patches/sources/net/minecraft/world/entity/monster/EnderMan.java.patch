--- a/net/minecraft/world/entity/monster/EnderMan.java
+++ b/net/minecraft/world/entity/monster/EnderMan.java
@@ -334,7 +_,15 @@
     private boolean teleport(double x, double y, double z) {
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos(x, y, z);
 
-        while (mutableBlockPos.getY() > this.level().getMinY() && !this.level().getBlockState(mutableBlockPos).blocksMotion()) {
+        // cookie start
+        net.minecraft.world.level.chunk.LevelChunk chunk = this.level().getChunkIfLoaded(mutableBlockPos);
+
+        if (chunk == null) {
+            return false;
+        }
+
+        while (mutableBlockPos.getY() > this.level().getMinY() && !chunk.getBlockState(mutableBlockPos).blocksMotion()) {
+        // cookie end
             mutableBlockPos.move(Direction.DOWN);
         }
 
@@ -584,9 +_,33 @@
 
         @Override
         public boolean canUse() {
+            // cookie start - Async target finding
+            if (io.cookiemc.cookie.Config.INSTANCE.entities.asyncTargetFinding.searchEntity) {
+                if (poll()) {
+                    return true;
+                }
+                final EnderMan enderman = this.enderman;
+                final var ctx = enderman.getGoalCtx();
+                if (!ctx.state) return false;
+                final var level = getServerLevel(this.enderman);
+                final var cond = this.startAggroTargetConditions.range(this.getFollowDistance()).copy();
+                ctx.wake = () -> level.getNearestPlayer(cond, enderman);
+                return false;
+            }
+            // cookie end - Async target finding
             this.pendingTarget = getServerLevel(this.enderman).getNearestPlayer(this.startAggroTargetConditions.range(this.getFollowDistance()), this.enderman);
             return this.pendingTarget != null;
         }
+
+        // cookie start - Async target finding
+        protected boolean poll() {
+            if (!(this.mob.getGoalCtx().result() instanceof Player player)) return false;
+            var serverLevel = getServerLevel(this.enderman);
+            if (!this.startAggroTargetConditions.range(this.getFollowDistance()).test(serverLevel, enderman, player)) return false;
+            this.pendingTarget = player;
+            return true;
+        }
+        // cookie end - Async target finding
 
         @Override
         public void start() {
