--- a/net/minecraft/Util.java
+++ b/net/minecraft/Util.java
@@ -17,6 +_,8 @@
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
+import io.cookiemc.cookie.cookieBootstrap;
+import io.cookiemc.cookie.Config;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
@@ -98,7 +_,7 @@
     public static final TracingExecutor DIMENSION_DATA_IO_POOL = makeExtraIoExecutor("Dimension-Data-IO-Worker-"); // Paper - Separate dimension data IO pool
     private static final TracingExecutor DOWNLOAD_POOL = makeIoExecutor("Download-", true);
     // Paper start - don't submit BLOCKING PROFILE LOOKUPS to the world gen thread
-    public static final ExecutorService PROFILE_EXECUTOR = Executors.newFixedThreadPool(2, new java.util.concurrent.ThreadFactory() {
+    public static final ExecutorService PROFILE_EXECUTOR = Config.INSTANCE.virtualThreads.shouldReplaceProfileLookupPool() ? Executors.newVirtualThreadPerTaskExecutor() : Executors.newFixedThreadPool(2, new java.util.concurrent.ThreadFactory() { // cookie - virtual threads
 
         private final AtomicInteger count = new AtomicInteger();
 
@@ -138,7 +_,7 @@
     }
 
     public static <T> Collector<T, ?, List<T>> toMutableList() {
-        return Collectors.toCollection(Lists::newArrayList);
+        return Collectors.toCollection(it.unimi.dsi.fastutil.objects.ObjectArrayList::new); // cookie - optimized collection
     }
 
     public static <T extends Comparable<T>> String getPropertyName(Property<T> property, Object value) {
@@ -620,17 +_,39 @@
         return Maps.transformValues(map, mapper);
     }
 
+    // cookie start - Faster sequencing of futures for chunk structure gen
     public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<V>> futures) {
+        return sequence(futures, false);
+    }
+    public static <V> CompletableFuture<List<V>> sequence(List<? extends CompletableFuture<V>> futures, boolean useFaster) {
+        // cookie end - Faster sequencing of futures for chunk structure gen
         if (futures.isEmpty()) {
             return CompletableFuture.completedFuture(List.of());
         } else if (futures.size() == 1) {
             return futures.get(0).thenApply(List::of);
         } else {
             CompletableFuture<Void> completableFuture = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));
+            if (useFaster) return sequenceFaster(futures, completableFuture); // cookie - Faster sequencing of futures for chunk structure gen
             return completableFuture.thenApply(_void -> futures.stream().map(CompletableFuture::join).toList());
         }
     }
 
+    // cookie start - Faster sequencing of futures for chunk structure gen
+    private static <V> CompletableFuture<List<V>> sequenceFaster(List<? extends CompletableFuture<V>> futures, CompletableFuture<Void> completableFuture) {
+        return completableFuture.thenCompose($ ->
+            CompletableFuture.supplyAsync(() -> {
+                    List<V> list = new java.util.ArrayList<>();
+
+                    for (CompletableFuture<V> future : futures) {
+                        list.add(future.join());
+                    }
+
+                    return list;
+                }
+            ));
+    }
+    // cookie end - Faster sequencing of futures for chunk structure gen
+
     public static <V> CompletableFuture<List<V>> sequenceFailFast(List<? extends CompletableFuture<? extends V>> completableFutures) {
         CompletableFuture<List<V>> completableFuture = new CompletableFuture<>();
         return fallibleSequence(completableFutures, completableFuture::completeExceptionally).applyToEither(completableFuture, Function.identity());
@@ -686,6 +_,7 @@
 
     public static void logAndPauseIfInIde(String error) {
         LOGGER.error(error);
+        if (cookieBootstrap.RUNNING_IN_IDE) new Throwable().printStackTrace(); // cookie - ide
         if (SharedConstants.IS_RUNNING_IN_IDE) {
             doPause(error);
         }
