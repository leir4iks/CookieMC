--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -1,5 +_,9 @@
 package net.minecraft.server.level;
 
+import ca.spottedleaf.moonrise.common.misc.NearbyPlayers;
+import java.util.concurrent.atomic.AtomicReference;
+import io.cookiemc.cookie.Config;
+import io.cookiemc.cookie.region.ServerRegions;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
@@ -103,8 +_,6 @@
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.Unit;
-import net.minecraft.util.profiling.Profiler;
-import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.Container;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.InteractionHand;
@@ -188,7 +_,10 @@
 
 public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patches.chunk_system.player.ChunkSystemServerPlayer { // Paper - rewrite chunk system
     private static final Logger LOGGER = LogUtils.getLogger();
-    public long lastSave = MinecraftServer.currentTick; // Paper - Incremental chunk and player saving
+    // cookie start - Threaded Regions
+    public static final long LAST_SAVE_ABSENT = Long.MIN_VALUE;
+    public long lastSave = LAST_SAVE_ABSENT; // Paper - Incremental chunk and player saving
+    // cookie end
     private static final int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_XZ = 32;
     private static final int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_Y = 10;
     private static final int FLY_STAT_RECORDING_SPEED = 25;
@@ -257,6 +_,7 @@
     private Vec3 lastKnownClientMovement = Vec3.ZERO;
     private Input lastClientInput = Input.EMPTY;
     private final Set<ThrownEnderpearl> enderPearls = new HashSet<>();
+    public final AtomicReference<NearbyPlayers> npr = new AtomicReference<>(); // cookie - Threaded Regions
     public final ContainerSynchronizer containerSynchronizer = new ContainerSynchronizer() {
         private final LoadingCache<TypedDataComponent<?>, Integer> cache = CacheBuilder.newBuilder()
             .maximumSize(256L)
@@ -424,6 +_,7 @@
     private boolean tpsBar = false; // Purpur - Implement TPSBar
     private boolean compassBar = false; // Purpur - Add compass command
     private boolean ramBar = false; // Purpur - Implement rambar commands
+    public volatile boolean requestingTimeResync = false; // cookie - Threaded Dimensions
 
     // Paper start - rewrite chunk system
     private ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.PlayerChunkLoaderData chunkLoader;
@@ -493,7 +_,7 @@
             long l1 = l * l;
             int i = l1 > 2147483647L ? Integer.MAX_VALUE : (int)l1;
             int coprime = this.getCoprime(i);
-            int randomInt = RandomSource.create().nextInt(i);
+            int randomInt = level.random.nextInt(i); // cookie - reduce RandomSource instances
 
             for (int i1 = 0; i1 < i; i1++) {
                 int i2 = (randomInt + coprime * i1) % i;
@@ -772,12 +_,24 @@
 
         Entity camera = this.getCamera();
         if (camera != this) {
-            if (camera.isAlive()) {
+            if (camera.canBeSpectated()) { // cookie - Threaded Regions - replace removed check
+                if (io.cookiemc.cookie.region.ServerRegions.isTickThreadFor(camera) && !camera.isRemoved()) { // cookie - Threaded Regions
                 this.absSnapTo(camera.getX(), camera.getY(), camera.getZ(), camera.getYRot(), camera.getXRot());
                 this.serverLevel().getChunkSource().move(this);
                 if (this.wantsToStopRiding()) {
                     this.setCamera(this);
                 }
+                // cookie start - Threaded Regions
+                } else {
+                    Entity realCamera = camera.getBukkitEntity().getHandleRaw();
+                    if (realCamera != camera) {
+                        this.setCamera(this);
+                        this.setCamera(realCamera);
+                    } else {
+                        this.teleportToCameraOffRegion();
+                    }
+                }
+                // cookie end
             } else {
                 this.setCamera(this);
             }
@@ -802,6 +_,24 @@
         }
         // Purpur end - Ridables
     }
+    // cookie start - Threaded Regions
+
+    private void teleportToCameraOffRegion() {
+        Entity cameraFinal = this.getCamera();
+        // use the task scheduler, as we don't know where the caller is invoking from
+        if (this != cameraFinal) {
+            this.getBukkitEntity().taskScheduler.schedule((final ServerPlayer newPlayer) -> {
+                io.cookiemc.cookie.region.ServerRegions.teleport(
+                    newPlayer, false, cameraFinal, null, null,
+                    org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.SPECTATE, null,
+                    (final ServerPlayer newerPlayer) -> {
+                        return newerPlayer.camera == cameraFinal;
+                    }
+                );
+            }, null, 1L);
+        } // else: do not bother teleporting to self
+    }
+    // cookie end
 
     private void updatePlayerAttributes() {
         AttributeInstance attribute = this.getAttribute(Attributes.BLOCK_INTERACTION_RANGE);
@@ -826,15 +_,22 @@
     public void doTick() {
         try {
             if (valid && !this.isSpectator() || !this.touchingUnloadedChunk()) { // Paper - don't tick dead players that are not in the world currently (pending respawn)
-                super.tick();
+                if (!this.touchingUnloadedChunk()) super.tick(); // cookie - ensure we dont touch any unloaded chunk
             }
 
+            // cookie start - only tick items in hand
+            if (Config.INSTANCE.entities.onlyTickItemsInHand) {
+                this.synchronizeSpecialItemUpdates(this.getMainHandItem());
+                this.synchronizeSpecialItemUpdates(this.getOffhandItem());
+            } else {
+            // cookie end
             for (int i = 0; i < this.getInventory().getContainerSize(); i++) {
                 ItemStack item = this.getInventory().getItem(i);
                 if (!item.isEmpty()) {
                     this.synchronizeSpecialItemUpdates(item);
                 }
             }
+            } // cookie - only tick items in hand
 
             if (this.getHealth() != this.lastSentHealth
                 || this.lastSentFood != this.foodData.getFoodLevel()
@@ -905,6 +_,7 @@
             }
             // CraftBukkit end
         } catch (Throwable var4) {
+            var4.printStackTrace(); // cookie - print please.
             CrashReport crashReport = CrashReport.forThrowable(var4, "Ticking player");
             CrashReportCategory crashReportCategory = crashReport.addCategory("Player being ticked");
             this.fillCrashReportCategory(crashReportCategory);
@@ -1030,6 +_,7 @@
     // Paper end - Expand PlayerDeathEvent API
     @Override
     public void die(DamageSource cause) {
+        processingDeath = true; // cookie - item entity spread
         // this.gameEvent(GameEvent.ENTITY_DIE); // Paper - move below event cancellation check
         boolean _boolean = this.serverLevel().getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES); final boolean showDeathMessage = _boolean; // Paper - OBFHELPER
         // CraftBukkit start - fire PlayerDeathEvent
@@ -1146,6 +_,7 @@
         this.getCombatTracker().recheckStatus();
         this.setLastDeathLocation(Optional.of(GlobalPos.of(this.level().dimension(), this.blockPosition())));
         this.setClientLoaded(false);
+        processingDeath = false; // cookie
     }
 
     private void tellNeutralMobsThatIDied() {
@@ -1408,14 +_,10 @@
                 this.unsetRemoved();
                 */
                 // CraftBukkit end
-                ProfilerFiller profilerFiller = Profiler.get();
-                profilerFiller.push("moving");
                 if (level != null && resourceKey == net.minecraft.world.level.dimension.LevelStem.OVERWORLD && level.getTypeKey() == net.minecraft.world.level.dimension.LevelStem.NETHER) { // CraftBukkit - empty to fall through to null to event
                     this.enteredNetherPosition = this.position();
                 }
 
-                profilerFiller.pop();
-                profilerFiller.push("placing");
                 // CraftBukkit start
                 this.isChangingDimension = true; // CraftBukkit - Set teleport invulnerability only if player changing worlds
                 LevelData worlddata = level.getLevelData();
@@ -1433,7 +_,6 @@
                 this.connection.internalTeleport(PositionMoveRotation.of(teleportTransition), teleportTransition.relatives()); // CraftBukkit - use internal teleport without event
                 this.connection.resetPosition();
                 level.addDuringTeleport(this);
-                profilerFiller.pop();
                 this.triggerDimensionChangeTriggers(serverLevel);
                 this.stopUsingItem();
                 this.connection.send(new ClientboundPlayerAbilitiesPacket(this.getAbilities()));
@@ -1520,6 +_,13 @@
         super.take(entity, quantity);
         this.containerMenu.broadcastChanges();
     }
+    // cookie start - cache eligible players for despawn checks
+
+    @Override
+    public boolean isAlive() {
+        return !this.isRemoved() && this.entityData.get(DATA_HEALTH_ID) > 0.0f && !this.dead;
+    }
+    // cookie end
 
     // CraftBukkit start - moved bed result checks from below into separate method
     private Either<Player.BedSleepingProblem, Unit> getBedResult(BlockPos at, Direction direction) {
@@ -2152,12 +_,18 @@
 
     @Override
     public void crit(Entity entityHit) {
-        this.serverLevel().getChunkSource().broadcastAndSend(this, new ClientboundAnimatePacket(entityHit, 4));
+        // cookie start - broadcast crit animations as the entity being critted
+        var level = this.serverLevel();
+        level.getChunkSource().broadcastAndSend(Config.INSTANCE.fixes.broadcastCritAnimationsAsTheEntityBeingCritted ? entityHit : this, new ClientboundAnimatePacket(entityHit, 4));
+        // cookie end
     }
 
     @Override
     public void magicCrit(Entity entityHit) {
-        this.serverLevel().getChunkSource().broadcastAndSend(this, new ClientboundAnimatePacket(entityHit, 5));
+        // cookie start - broadcast crit animations as the entity being critted
+        var level = this.serverLevel();
+        level.getChunkSource().broadcastAndSend(Config.INSTANCE.fixes.broadcastCritAnimationsAsTheEntityBeingCritted ? entityHit : this, new ClientboundAnimatePacket(entityHit, 5));
+        // cookie end
     }
 
     @Override
@@ -2188,6 +_,7 @@
             this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.CHANGE_GAME_MODE, gameMode.getId()));
             if (gameMode == GameType.SPECTATOR) {
                 this.removeEntitiesOnShoulder();
+                this.stopSleeping(); // cookie - MC-119417
                 this.stopRiding();
                 EnchantmentHelper.stopLocationBasedEffects(this);
             } else {
@@ -2464,6 +_,11 @@
     }
 
     public void setCamera(@Nullable Entity entityToSpectate) {
+        // cookie start - Threaded Regions
+        if (entityToSpectate != null && (entityToSpectate != this && !entityToSpectate.canBeSpectated())) {
+            return;
+        }
+        // cookie end
         Entity camera = this.getCamera();
         this.camera = (Entity)(entityToSpectate == null ? this : entityToSpectate);
         if (camera != this.camera) {
@@ -2482,16 +_,17 @@
                 }
             }
             // Paper end - Add PlayerStartSpectatingEntityEvent and PlayerStopSpectatingEntity
-            if (this.camera.level() instanceof ServerLevel serverLevel) {
-                this.teleportTo(serverLevel, this.camera.getX(), this.camera.getY(), this.camera.getZ(), Set.of(), this.getYRot(), this.getXRot(), false, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.SPECTATE); // CraftBukkit
-            }
-
-            if (entityToSpectate != null) {
-                this.serverLevel().getChunkSource().move(this);
-            }
-
+            // cookie - Threaded Regions - move down && not needed
+
+            // cookie start - Threaded Regions - handle camera setting better
+            if (this.camera == this
+                || (io.cookiemc.cookie.region.ServerRegions.isTickThreadFor(this.camera) && this.camera.moonrise$getTrackedEntity() != null
+                && this.camera.moonrise$getTrackedEntity().seenBy.contains(this.connection))) {
             this.connection.send(new ClientboundSetCameraPacket(this.camera));
-            this.connection.resetPosition();
+            }
+            // this.connection.resetPosition();
+            this.teleportToCameraOffRegion();
+            // cookie end
         }
     }
 
