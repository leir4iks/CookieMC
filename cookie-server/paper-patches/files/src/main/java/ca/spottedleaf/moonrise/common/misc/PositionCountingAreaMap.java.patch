--- a/src/main/java/ca/spottedleaf/moonrise/common/misc/PositionCountingAreaMap.java
+++ b/src/main/java/ca/spottedleaf/moonrise/common/misc/PositionCountingAreaMap.java
@@ -3,36 +_,49 @@
 import ca.spottedleaf.moonrise.common.util.CoordinateUtils;
 import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongSet;
+import it.unimi.dsi.fastutil.objects.Reference2ReferenceMap;
+import it.unimi.dsi.fastutil.objects.Reference2ReferenceMaps;
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ReferenceSet;
 
 public final class PositionCountingAreaMap<T> {
 
-    private final Reference2ReferenceOpenHashMap<T, PositionCounter> counters = new Reference2ReferenceOpenHashMap<>();
+    private final Reference2ReferenceMap<T, PositionCounter> counters = Reference2ReferenceMaps.synchronize(new Reference2ReferenceOpenHashMap<>()); // cookie - synchronize
     private final Long2IntOpenHashMap positions = new Long2IntOpenHashMap();
+    private final Object lock = new Object(); // cookie - lock
 
     public ReferenceSet<T> getObjects() {
         return this.counters.keySet();
     }
 
     public LongSet getPositions() {
+        synchronized (lock) { // cookie - lock
         return this.positions.keySet();
+        } // cookie - lock
     }
 
     public int getTotalPositions() {
+        synchronized (lock) { // cookie - lock
         return this.positions.size();
+        } // cookie - lock
     }
 
     public boolean hasObjectsNear(final long pos) {
+        synchronized (lock) { // cookie - lock
         return this.positions.containsKey(pos);
+        } // cookie - lock
     }
 
     public boolean hasObjectsNear(final int toX, final int toZ) {
+        synchronized (lock) { // cookie - lock
         return this.positions.containsKey(CoordinateUtils.getChunkKey(toX, toZ));
+        } // cookie - lock
     }
 
     public int getObjectsNear(final int toX, final int toZ) {
+        synchronized (lock) { // cookie - lock
         return this.positions.get(CoordinateUtils.getChunkKey(toX, toZ));
+        } // cookie - lock
     }
 
     public boolean add(final T parameter, final int toX, final int toZ, final int distance) {
@@ -89,15 +_,19 @@
 
         @Override
         protected void addCallback(final T parameter, final int toX, final int toZ) {
+            synchronized (lock) { // cookie - lock
             PositionCountingAreaMap.this.positions.addTo(CoordinateUtils.getChunkKey(toX, toZ), 1);
+            } // cookie - lock
         }
 
         @Override
         protected void removeCallback(final T parameter, final int toX, final int toZ) {
+            synchronized (lock) { // cookie - lock
             final long key = CoordinateUtils.getChunkKey(toX, toZ);
             if (PositionCountingAreaMap.this.positions.addTo(key, -1) == 1) {
                 PositionCountingAreaMap.this.positions.remove(key);
             }
+            } // cookie - lock
         }
     }
 }
