--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java
@@ -27,6 +_,7 @@
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.server.chunk.TheChunkSystem;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -67,11 +_,7 @@
     private static final Logger LOGGER = LogUtils.getClassLogger();
 
     public static void init(final boolean useParallelGen) {
-        for (final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor executor : MoonriseCommon.RADIUS_AWARE_GROUP.getAllExecutors()) {
-            executor.setMaxParallelism(useParallelGen ? -1 : 1);
-        }
-
-        LOGGER.info("Chunk system is using population gen parallelism: " + useParallelGen);
+        // Canvas - rewrite chunk system
     }
 
     public static final TicketType CHUNK_LOAD = ChunkSystemTicketType.create("chunk_system:chunk_load", Long::compareTo);
@@ -116,14 +_,16 @@
 
     public final ServerLevel world;
     public final RadiusAwarePrioritisedExecutor radiusAwareScheduler;
-    public final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor parallelGenExecutor;
-    private final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor radiusAwareGenExecutor;
-    public final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor loadExecutor;
+    // Canvas start - rewrite moonrise executor
+    public final TheChunkSystem.ExecutorGroup.ThreadPoolExecutor parallelGenExecutor;
+    private final TheChunkSystem.ExecutorGroup.ThreadPoolExecutor radiusAwareGenExecutor;
+    public final TheChunkSystem.ExecutorGroup.ThreadPoolExecutor loadExecutor;
     public final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor ioExecutor;
-    public final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor compressionExecutor;
-    public final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor saveExecutor;
+    public final TheChunkSystem.ExecutorGroup.ThreadPoolExecutor compressionExecutor;
+    public final TheChunkSystem.ExecutorGroup.ThreadPoolExecutor saveExecutor;
+    // Canvas end
 
-    private final PrioritisedTaskQueue mainThreadExecutor = new PrioritisedTaskQueue();
+    // public final PrioritisedTaskQueue mainThreadExecutor = new PrioritisedTaskQueue(); // Canvas - Threaded Regions
 
     public final ChunkHolderManager chunkHolderManager;
 
@@ -199,7 +_,7 @@
                 // FULL is executed on main.
         );
 
-        for (final ChunkStatus status : parallelCapableStatus) {
+        for (final ChunkStatus status : ChunkStatus.getStatusList()) { // Canvas - mark all ChunkStatuses as parallel capable
             ((ChunkSystemChunkStatus)status).moonrise$setParallelCapable(true);
         }
     }
@@ -292,14 +_,16 @@
         this.lockShift = Math.max(((ChunkSystemServerLevel)world).moonrise$getRegionChunkShift(), ThreadedTicketLevelPropagator.SECTION_SHIFT);
         this.schedulingLockArea = new ReentrantAreaLock(this.getChunkSystemLockShift());
 
-        this.parallelGenExecutor = MoonriseCommon.PARALLEL_GEN_GROUP.createExecutor(-1, MoonriseCommon.WORKER_QUEUE_HOLD_TIME, 0);
-        this.radiusAwareGenExecutor = MoonriseCommon.RADIUS_AWARE_GROUP.createExecutor(1, MoonriseCommon.WORKER_QUEUE_HOLD_TIME, 0);
-        this.loadExecutor = MoonriseCommon.LOAD_GROUP.createExecutor(-1, MoonriseCommon.WORKER_QUEUE_HOLD_TIME, 0);
-        this.radiusAwareScheduler = new RadiusAwarePrioritisedExecutor(this.radiusAwareGenExecutor, 16);
+        // Canvas start - rewrite moonrise executor
+        this.parallelGenExecutor = MoonriseCommon.PARALLEL_GEN_GROUP.createExecutor();
+        this.radiusAwareGenExecutor = MoonriseCommon.RADIUS_AWARE_GROUP.createExecutor();
+        this.loadExecutor = MoonriseCommon.LOAD_GROUP.createExecutor();
+        this.radiusAwareScheduler = new RadiusAwarePrioritisedExecutor(this.radiusAwareGenExecutor, 10_000); // Canvas - optimize moonrise
         this.ioExecutor = MoonriseCommon.SERVER_REGION_IO_GROUP.createExecutor(-1, MoonriseCommon.IO_QUEUE_HOLD_TIME, 0);
         // we need a separate executor here so that on shutdown we can continue to process I/O tasks
-        this.compressionExecutor = MoonriseCommon.LOAD_GROUP.createExecutor(-1, MoonriseCommon.WORKER_QUEUE_HOLD_TIME, 0);
-        this.saveExecutor = MoonriseCommon.LOAD_GROUP.createExecutor(-1, MoonriseCommon.WORKER_QUEUE_HOLD_TIME, 0);
+        this.compressionExecutor = MoonriseCommon.LOAD_GROUP.createExecutor();
+        this.saveExecutor = MoonriseCommon.LOAD_GROUP.createExecutor();
+        // Canvas end
         this.chunkHolderManager = new ChunkHolderManager(world, this);
     }
 
@@ -344,8 +_,7 @@
     }
 
     public boolean executeMainThreadTask() {
-        TickThread.ensureTickThread("Cannot execute main thread task off-main");
-        return this.mainThreadExecutor.executeTask();
+        throw new UnsupportedOperationException("Unsupported with Canvas multithreading");
     }
 
     public void raisePriority(final int x, final int z, final Priority priority) {
@@ -365,7 +_,7 @@
                                      final Consumer<LevelChunk> onComplete) {
         final int radius = toStatus.ordinal() - 1; // 0 -> BORDER, 1 -> TICKING, 2 -> ENTITY_TICKING
 
-        if (!TickThread.isTickThreadFor(this.world, chunkX, chunkZ, Math.max(0, radius))) {
+        if (!io.canvasmc.canvas.region.ServerRegions.isTickThreadFor(this.world, chunkX, chunkZ, Math.max(0, radius))) { // Canvas - use our tick thread checks
             this.scheduleChunkTask(chunkX, chunkZ, () -> {
                 ChunkTaskScheduler.this.scheduleTickingState(chunkX, chunkZ, toStatus, addTicket, priority, onComplete);
             }, priority);
@@ -569,7 +_,7 @@
 
     public void scheduleChunkLoad(final int chunkX, final int chunkZ, final ChunkStatus toStatus, final boolean addTicket,
                                   final Priority priority, final Consumer<ChunkAccess> onComplete) {
-        if (!TickThread.isTickThreadFor(this.world, chunkX, chunkZ)) {
+        if (!io.canvasmc.canvas.region.ServerRegions.isTickThreadFor(this.world, chunkX, chunkZ)) { // Canvas - use our tick thread checks
             this.scheduleChunkTask(chunkX, chunkZ, () -> {
                 ChunkTaskScheduler.this.scheduleChunkLoad(chunkX, chunkZ, toStatus, addTicket, priority, onComplete);
             }, priority);
@@ -790,7 +_,7 @@
         final NewChunkHolder chunkHolder = this.chunkHolderManager.getChunkHolder(chunkX, chunkZ);
 
         if (chunkHolder == null) {
-            throw new IllegalStateException("Missing chunkholder when required");
+            return true; // Canvas - just fail, this is nullable given Canvas threading changes
         }
 
         final ChunkStatus holderStatus = chunkHolder.getCurrentGenStatus();
@@ -830,7 +_,7 @@
      */
     @Deprecated
     public PrioritisedExecutor.PrioritisedTask scheduleChunkTask(final Runnable run, final Priority priority) {
-        return this.mainThreadExecutor.queueTask(run, priority);
+        throw new UnsupportedOperationException(); // Canvas - Threaded Regions
     }
 
     public PrioritisedExecutor.PrioritisedTask createChunkTask(final int chunkX, final int chunkZ, final Runnable run) {
@@ -839,7 +_,7 @@
 
     public PrioritisedExecutor.PrioritisedTask createChunkTask(final int chunkX, final int chunkZ, final Runnable run,
                                                                final Priority priority) {
-        return this.mainThreadExecutor.createTask(run, priority);
+        return MinecraftServer.getThreadedServer().taskQueue.createChunkTask(this.world, chunkX, chunkZ, run, priority); // Canvas - Threaded Regions
     }
 
     public PrioritisedExecutor.PrioritisedTask scheduleChunkTask(final int chunkX, final int chunkZ, final Runnable run) {
@@ -848,8 +_,21 @@
 
     public PrioritisedExecutor.PrioritisedTask scheduleChunkTask(final int chunkX, final int chunkZ, final Runnable run,
                                                                  final Priority priority) {
-        return this.mainThreadExecutor.queueTask(run, priority);
-    }
+        return MinecraftServer.getThreadedServer().taskQueue.queueChunkTask(this.world, chunkX, chunkZ, run, priority); // Canvas - Threaded Regions
+    }
+    // Canvas start - Threaded Regions
+
+    public PrioritisedExecutor.PrioritisedTask scheduleChunkTaskEventually(final int chunkX, final int chunkZ, final Runnable run) {
+        return this.scheduleChunkTaskEventually(chunkX, chunkZ, run, Priority.NORMAL);
+    }
+
+    public PrioritisedExecutor.PrioritisedTask scheduleChunkTaskEventually(final int chunkX, final int chunkZ, final Runnable run,
+                                                                           final Priority priority) {
+        final PrioritisedExecutor.PrioritisedTask ret = this.createChunkTask(chunkX, chunkZ, run, priority);
+        this.world.taskQueueRegionData.pushGlobalChunkTask(() -> MinecraftServer.getThreadedServer().taskQueue.queueChunkTask(ChunkTaskScheduler.this.world, chunkX, chunkZ, run, priority));
+        return ret;
+    }
+    // Canvas end
 
     public boolean halt(final boolean sync, final long maxWaitNS) {
         this.radiusAwareGenExecutor.halt();
