--- a/ca/spottedleaf/moonrise/paper/util/BaseChunkSystemHooks.java
+++ b/ca/spottedleaf/moonrise/paper/util/BaseChunkSystemHooks.java
@@ -6,6 +_,7 @@
 import ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader;
 import ca.spottedleaf.moonrise.patches.chunk_system.world.ChunkSystemServerChunkCache;
 import ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickServerLevel;
+import io.canvasmc.canvas.region.ServerRegions;
 import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.FullChunkStatus;
 import net.minecraft.server.level.ServerLevel;
@@ -26,7 +_,7 @@
 
     @Override
     public void scheduleChunkTask(final ServerLevel level, final int chunkX, final int chunkZ, final Runnable run, final Priority priority) {
-        ((ChunkSystemServerLevel)level).moonrise$getChunkTaskScheduler().scheduleChunkTask(chunkX, chunkZ, run, priority);
+        ((ChunkSystemServerLevel)level).moonrise$getChunkTaskScheduler().scheduleChunkTaskEventually(chunkX, chunkZ, run, priority); // Canvas - Threaded Regions
     }
 
     @Override
@@ -76,18 +_,19 @@
 
     @Override
     public void onChunkHolderCreate(final ServerLevel level, final ChunkHolder holder) {
-
+        if (level.server.isRegionized()) level.regioniser.addChunk(holder.getPos().x, holder.getPos().z); // Canvas - Threaded Regions
     }
 
     @Override
     public void onChunkHolderDelete(final ServerLevel level, final ChunkHolder holder) {
         // Update progress listener for LevelLoadingScreen
-        final ChunkProgressListener progressListener = level.getChunkSource().chunkMap.progressListener;
+        final ChunkProgressListener progressListener = null; // Canvas - cannot schedule chunk task here, as it would create a chunkholder
         if (progressListener != null) {
             this.scheduleChunkTask(level, holder.getPos().x, holder.getPos().z, () -> {
                 progressListener.onStatusChange(holder.getPos(), null);
             });
         }
+        if (level.server.isRegionized()) level.regioniser.removeChunk(holder.getPos().x, holder.getPos().z); // Canvas - Threaded Regions
     }
 
     @Override
@@ -98,13 +_,13 @@
 
     @Override
     public void onChunkBorder(final LevelChunk chunk, final ChunkHolder holder) {
-        ((ChunkSystemServerLevel)((ServerLevel)chunk.getLevel())).moonrise$getLoadedChunks().add(chunk);
+        ServerRegions.getTickData(chunk.level).addChunk(chunk); // Canvas - Threaded Regions
         chunk.loadCallback();
     }
 
     @Override
     public void onChunkNotBorder(final LevelChunk chunk, final ChunkHolder holder) {
-        ((ChunkSystemServerLevel)((ServerLevel)chunk.getLevel())).moonrise$getLoadedChunks().remove(chunk);
+        ServerRegions.getTickData(chunk.level).removeChunk(chunk); // Canvas - Threaded Regions
         chunk.unloadCallback();
     }
 
@@ -116,7 +_,7 @@
 
     @Override
     public void onChunkTicking(final LevelChunk chunk, final ChunkHolder holder) {
-        ((ChunkSystemServerLevel)((ServerLevel)chunk.getLevel())).moonrise$getTickingChunks().add(chunk);
+        ServerRegions.getTickData(chunk.level).addTickingChunk(chunk); // Canvas - Threaded Regions
         if (!((ChunkSystemLevelChunk)chunk).moonrise$isPostProcessingDone()) {
             chunk.postProcessGeneration((ServerLevel)chunk.getLevel());
         }
@@ -126,18 +_,18 @@
 
     @Override
     public void onChunkNotTicking(final LevelChunk chunk, final ChunkHolder holder) {
-        ((ChunkSystemServerLevel)((ServerLevel)chunk.getLevel())).moonrise$getTickingChunks().remove(chunk);
+        ServerRegions.getTickData(chunk.level).removeTickingChunk(chunk); // Canvas - Threaded Regions
     }
 
     @Override
     public void onChunkEntityTicking(final LevelChunk chunk, final ChunkHolder holder) {
-        ((ChunkSystemServerLevel)((ServerLevel)chunk.getLevel())).moonrise$getEntityTickingChunks().add(chunk);
+        ServerRegions.getTickData(chunk.level).addEntityTickingChunk(chunk); // Canvas - Threaded Regions
         ((ChunkTickServerLevel)(ServerLevel)chunk.getLevel()).moonrise$markChunkForPlayerTicking(chunk); // Moonrise - chunk tick iteration
     }
 
     @Override
     public void onChunkNotEntityTicking(final LevelChunk chunk, final ChunkHolder holder) {
-        ((ChunkSystemServerLevel)((ServerLevel)chunk.getLevel())).moonrise$getEntityTickingChunks().remove(chunk);
+        ServerRegions.getTickData(chunk.level).removeEntityTickingChunk(chunk); // Canvas - Threaded Regions
         ((ChunkTickServerLevel)(ServerLevel)chunk.getLevel()).moonrise$removeChunkForPlayerTicking(chunk); // Moonrise - chunk tick iteration
     }
 
