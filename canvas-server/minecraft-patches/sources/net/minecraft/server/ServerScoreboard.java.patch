--- a/net/minecraft/server/ServerScoreboard.java
+++ b/net/minecraft/server/ServerScoreboard.java
@@ -32,8 +_,8 @@
         }, DataFixTypes.SAVED_DATA_SCOREBOARD
     );
     private final MinecraftServer server;
-    private final Set<Objective> trackedObjectives = Sets.newHashSet();
-    private final List<Runnable> dirtyListeners = Lists.newArrayList();
+    private final Set<Objective> trackedObjectives = new it.unimi.dsi.fastutil.objects.ObjectArraySet<>(); // Canvas - optimized collection
+    private final List<Runnable> dirtyListeners = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>(); // Canvas - optimized collection
 
     public ServerScoreboard(MinecraftServer server) {
         this.server = server;
@@ -64,14 +_,14 @@
     }
 
     @Override
-    public void onPlayerRemoved(ScoreHolder scoreHolder) {
+    public synchronized void onPlayerRemoved(ScoreHolder scoreHolder) { // Canvas - synchronized
         super.onPlayerRemoved(scoreHolder);
         this.broadcastAll(new ClientboundResetScorePacket(scoreHolder.getScoreboardName(), null)); // CraftBukkit
         this.setDirty();
     }
 
     @Override
-    public void onPlayerScoreRemoved(ScoreHolder scoreHolder, Objective objective) {
+    public synchronized void onPlayerScoreRemoved(ScoreHolder scoreHolder, Objective objective) { // Canvas - synchronized
         super.onPlayerScoreRemoved(scoreHolder, objective);
         if (this.trackedObjectives.contains(objective)) {
             this.broadcastAll(new ClientboundResetScorePacket(scoreHolder.getScoreboardName(), objective.getName())); // CraftBukkit
@@ -81,7 +_,7 @@
     }
 
     @Override
-    public void setDisplayObjective(DisplaySlot slot, @Nullable Objective objective) {
+    public synchronized void setDisplayObjective(DisplaySlot slot, @Nullable Objective objective) { // Canvas - synchronized
         Objective displayObjective = this.getDisplayObjective(slot);
         super.setDisplayObjective(slot, objective);
         if (displayObjective != objective && displayObjective != null) {
@@ -104,7 +_,7 @@
     }
 
     @Override
-    public boolean addPlayerToTeam(String playerName, PlayerTeam team) {
+    public synchronized boolean addPlayerToTeam(String playerName, PlayerTeam team) { // Canvas - synchronized
         if (super.addPlayerToTeam(playerName, team)) {
             this.broadcastAll(ClientboundSetPlayerTeamPacket.createPlayerPacket(team, playerName, ClientboundSetPlayerTeamPacket.Action.ADD)); // CraftBukkit
             this.setDirty();
@@ -115,7 +_,7 @@
     }
 
     // Paper start - Multiple Entries with Scoreboards
-    public boolean addPlayersToTeam(java.util.Collection<String> players, PlayerTeam team) {
+    public synchronized boolean addPlayersToTeam(java.util.Collection<String> players, PlayerTeam team) { // Canvas - synchronized
         boolean anyAdded = false;
         for (String playerName : players) {
             if (super.addPlayerToTeam(playerName, team)) {
@@ -134,14 +_,14 @@
     // Paper end - Multiple Entries with Scoreboards
 
     @Override
-    public void removePlayerFromTeam(String username, PlayerTeam playerTeam) {
+    public synchronized void removePlayerFromTeam(String username, PlayerTeam playerTeam) { // Canvas - synchronized
         super.removePlayerFromTeam(username, playerTeam);
         this.broadcastAll(ClientboundSetPlayerTeamPacket.createPlayerPacket(playerTeam, username, ClientboundSetPlayerTeamPacket.Action.REMOVE)); // CraftBukkit
         this.setDirty();
     }
 
     // Paper start - Multiple Entries with Scoreboards
-    public void removePlayersFromTeam(java.util.Collection<String> players, PlayerTeam team) {
+    public synchronized void removePlayersFromTeam(java.util.Collection<String> players, PlayerTeam team) { // Canvas - synchronized
         for (String playerName : players) {
             super.removePlayerFromTeam(playerName, team);
         }
@@ -152,13 +_,13 @@
     // Paper end - Multiple Entries with Scoreboards
 
     @Override
-    public void onObjectiveAdded(Objective objective) {
+    public synchronized void onObjectiveAdded(Objective objective) { // Canvas - synchronized
         super.onObjectiveAdded(objective);
         this.setDirty();
     }
 
     @Override
-    public void onObjectiveChanged(Objective objective) {
+    public synchronized void onObjectiveChanged(Objective objective) { // Canvas - synchronized
         super.onObjectiveChanged(objective);
         if (this.trackedObjectives.contains(objective)) {
             this.broadcastAll(new ClientboundSetObjectivePacket(objective, 2)); // CraftBukkit
@@ -168,7 +_,7 @@
     }
 
     @Override
-    public void onObjectiveRemoved(Objective objective) {
+    public synchronized void onObjectiveRemoved(Objective objective) { // Canvas - synchronized
         super.onObjectiveRemoved(objective);
         if (this.trackedObjectives.contains(objective)) {
             this.stopTrackingObjective(objective);
@@ -178,27 +_,27 @@
     }
 
     @Override
-    public void onTeamAdded(PlayerTeam playerTeam) {
+    public synchronized void onTeamAdded(PlayerTeam playerTeam) { // Canvas - synchronized
         super.onTeamAdded(playerTeam);
         this.broadcastAll(ClientboundSetPlayerTeamPacket.createAddOrModifyPacket(playerTeam, true)); // CraftBukkit
         this.setDirty();
     }
 
     @Override
-    public void onTeamChanged(PlayerTeam playerTeam) {
+    public synchronized void onTeamChanged(PlayerTeam playerTeam) { // Canvas - synchronized
         super.onTeamChanged(playerTeam);
         this.broadcastAll(ClientboundSetPlayerTeamPacket.createAddOrModifyPacket(playerTeam, false)); // CraftBukkit
         this.setDirty();
     }
 
     @Override
-    public void onTeamRemoved(PlayerTeam playerTeam) {
+    public synchronized void onTeamRemoved(PlayerTeam playerTeam) { // Canvas - synchronized
         super.onTeamRemoved(playerTeam);
         this.broadcastAll(ClientboundSetPlayerTeamPacket.createRemovePacket(playerTeam)); // CraftBukkit
         this.setDirty();
     }
 
-    public void addDirtyListener(Runnable runnable) {
+    public synchronized void addDirtyListener(Runnable runnable) { // Canvas - synchronized
         this.dirtyListeners.add(runnable);
     }
 
@@ -208,7 +_,7 @@
         }
     }
 
-    public List<Packet<?>> getStartTrackingPackets(Objective objective) {
+    public synchronized List<Packet<?>> getStartTrackingPackets(Objective objective) { // Canvas - synchronized
         List<Packet<?>> list = Lists.newArrayList();
         list.add(new ClientboundSetObjectivePacket(objective, 0));
 
@@ -233,7 +_,7 @@
         return list;
     }
 
-    public void startTrackingObjective(Objective objective) {
+    public synchronized void startTrackingObjective(Objective objective) { // Canvas - synchronized
         List<Packet<?>> startTrackingPackets = this.getStartTrackingPackets(objective);
 
         for (ServerPlayer serverPlayer : this.server.getPlayerList().getPlayers()) {
@@ -246,7 +_,7 @@
         this.trackedObjectives.add(objective);
     }
 
-    public List<Packet<?>> getStopTrackingPackets(Objective objective) {
+    public synchronized List<Packet<?>> getStopTrackingPackets(Objective objective) { // Canvas - synchronized
         List<Packet<?>> list = Lists.newArrayList();
         list.add(new ClientboundSetObjectivePacket(objective, 1));
 
@@ -259,7 +_,7 @@
         return list;
     }
 
-    public void stopTrackingObjective(Objective objective) {
+    public synchronized void stopTrackingObjective(Objective objective) { // Canvas - synchronized
         List<Packet<?>> stopTrackingPackets = this.getStopTrackingPackets(objective);
 
         for (ServerPlayer serverPlayer : this.server.getPlayerList().getPlayers()) {
@@ -272,7 +_,7 @@
         this.trackedObjectives.remove(objective);
     }
 
-    public int getObjectiveDisplaySlotCount(Objective objective) {
+    public synchronized int getObjectiveDisplaySlotCount(Objective objective) { // Canvas - synchronized
         int i = 0;
 
         for (DisplaySlot displaySlot : DisplaySlot.values()) {
