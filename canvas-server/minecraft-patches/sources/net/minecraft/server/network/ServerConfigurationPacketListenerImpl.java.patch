--- a/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
@@ -1,5 +_,6 @@
 package net.minecraft.server.network;
 
+import ca.spottedleaf.concurrentutil.util.Priority;
 import com.mojang.authlib.GameProfile;
 import com.mojang.logging.LogUtils;
 import java.util.List;
@@ -28,13 +_,16 @@
 import net.minecraft.server.RegistryLayer;
 import net.minecraft.server.ServerLinks;
 import net.minecraft.server.level.ClientInformation;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.level.TicketType;
 import net.minecraft.server.network.config.JoinWorldTask;
 import net.minecraft.server.network.config.ServerResourcePackConfigurationTask;
 import net.minecraft.server.network.config.SynchronizeRegistriesTask;
 import net.minecraft.server.packs.repository.KnownPack;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.world.flag.FeatureFlags;
+import net.minecraft.world.level.chunk.status.ChunkStatus;
 import org.slf4j.Logger;
 
 public class ServerConfigurationPacketListenerImpl extends ServerCommonPacketListenerImpl implements ServerConfigurationPacketListener, TickablePacketListener {
@@ -159,8 +_,26 @@
                 return;
             }
 
+            // Canvas start - Asynchronous player placement
+            final ServerLevel world = this.player.serverLevel();
+            LOGGER.info("Placing ticket for login and queuing placement task for player '{}'", this.player.getName().getString());
+            world.getChunkSource().updateRegionTicket(this.player.chunkPosition(), true, TicketType.LOGIN);
+            
             ServerPlayer playerForLogin = playerList.getPlayerForLogin(this.gameProfile, this.clientInformation, this.player); // CraftBukkit
-            playerList.placeNewPlayer(this.connection, playerForLogin, this.createCookie(this.clientInformation));
+            
+            world.loadChunksForMoveAsync(
+                playerForLogin.getBoundingBox().inflate(5),
+                Priority.HIGHER,
+                (chunks) -> {
+                    this.server.execute(() -> {
+                        try {
+                            playerList.placeNewPlayer(this.connection, playerForLogin, this.createCookie(this.clientInformation));
+                        } finally {
+                            world.getChunkSource().updateRegionTicket(this.player.chunkPosition(), false, TicketType.LOGIN);
+                        }
+                    });
+                }
+            );
+            // Canvas end
         } catch (Exception var5) {
             LOGGER.error("Couldn't place player in world", (Throwable)var5);
             // Paper start - Debugging
@@ -168,8 +_,8 @@
                 var5.printStackTrace();
             }
             // Paper end - Debugging
-            this.connection.send(new ClientboundDisconnectPacket(DISCONNECT_REASON_INVALID_DATA));
-            this.connection.disconnect(DISCONNECT_REASON_INVALID_DATA);
+            this.connection.send(new ClientboundDisconnectPacket(Component.literal(var5.getMessage()))); // Canvas - use actual reason
+            this.connection.disconnect(Component.literal(var5.getMessage())); // Canvas - use actual reason
         }
     }
 
