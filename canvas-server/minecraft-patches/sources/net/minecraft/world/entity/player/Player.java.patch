--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -15,6 +_,8 @@
 import java.util.function.Predicate;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.region.ServerRegions;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -297,6 +_,14 @@
         builder.define(DATA_SHOULDER_LEFT, new CompoundTag());
         builder.define(DATA_SHOULDER_RIGHT, new CompoundTag());
     }
+    // Canvas start - lag compensation
+
+    private int lagCompensation(int original, ServerRegions.WorldTickData tickData) { // Canvas - Threaded Regions
+        if (!Config.INSTANCE.lagCompensation.enabled || !Config.INSTANCE.lagCompensation.sleepingAcceleration) return original;
+        if (this.level().isClientSide) return original;
+        return original + tickData.tpsCalculator.applicableMissedTicks(); // Canvas - Threaded Regions
+    }
+    // Canvas end
 
     @Override
     public void tick() {
@@ -315,25 +_,28 @@
             this.takeXpDelay--;
         }
 
+        ServerRegions.WorldTickData tickData = ServerRegions.getTickData(this.level().level()); // Canvas - Threaded Regions
         if (this.isSleeping()) {
-            this.sleepCounter++;
+            lagCompensation(this.sleepCounter++, tickData); // Canvas - lag compensation - Threaded Regions
             // Paper start - Add PlayerDeepSleepEvent
-            if (this.sleepCounter == SLEEP_DURATION) {
+            if (lagCompensation(this.sleepCounter, tickData) == SLEEP_DURATION) { // Canvas - lag compensation - Threaded Regions
                 if (!new io.papermc.paper.event.player.PlayerDeepSleepEvent((org.bukkit.entity.Player) getBukkitEntity()).callEvent()) {
                     this.sleepCounter = Integer.MIN_VALUE;
                 }
             }
             // Paper end - Add PlayerDeepSleepEvent
-            if (this.sleepCounter > 100) {
+            if (lagCompensation(this.sleepCounter, tickData) > 100) { // Canvas - lag compensation - Threaded Regions
                 this.sleepCounter = 100;
             }
 
             if (!this.level().isClientSide && this.level().isBrightOutside()) {
                 this.stopSleepInBed(false, true);
             }
-        } else if (this.sleepCounter > 0) {
-            this.sleepCounter++;
-            if (this.sleepCounter >= 110) {
+        // Canvas start - lag compensation
+        } else if (lagCompensation(this.sleepCounter, tickData) > 0) { // Canvas - Threaded Regions
+            lagCompensation(this.sleepCounter++, tickData); // Canvas - Threaded Regions
+            if (lagCompensation(this.sleepCounter, tickData) >= 110) { // Canvas - Threaded Regions
+        // Canvas end
                 this.sleepCounter = 0;
             }
         }
@@ -348,19 +_,23 @@
         this.moveCloak();
         if (this instanceof ServerPlayer serverPlayer) {
             this.foodData.tick(serverPlayer);
-            this.awardStat(Stats.PLAY_TIME);
-            this.awardStat(Stats.TOTAL_WORLD_TIME);
+            // Canvas start - increase time statistics in intervals
+            if (Config.INSTANCE.increaseTimeStatistics == 1 || this.tickCount % Config.INSTANCE.increaseTimeStatistics == 0) {
+                this.awardStat(Stats.PLAY_TIME, Config.INSTANCE.increaseTimeStatistics);
+                this.awardStat(Stats.TOTAL_WORLD_TIME, Config.INSTANCE.increaseTimeStatistics);
+            // Canvas end
             if (this.isAlive()) {
-                this.awardStat(Stats.TIME_SINCE_DEATH);
+                this.awardStat(Stats.TIME_SINCE_DEATH, Config.INSTANCE.increaseTimeStatistics); // Canvas - increase time statistics in intervals
             }
 
             if (this.isDiscrete()) {
-                this.awardStat(Stats.CROUCH_TIME);
+                this.awardStat(Stats.CROUCH_TIME, Config.INSTANCE.increaseTimeStatistics); // Canvas - increase time statistics in intervals
             }
 
             if (!this.isSleeping()) {
-                this.awardStat(Stats.TIME_SINCE_REST);
+                this.awardStat(Stats.TIME_SINCE_REST, Config.INSTANCE.increaseTimeStatistics); // Canvas - increase time statistics in intervals
             }
+            } // Canvas - increase time statistics in intervals
         }
 
         int i = 29999999;
@@ -630,7 +_,14 @@
         }
 
         this.tickRegeneration();
+        // Canvas start - only tick items in hand
+        if (Config.INSTANCE.entities.onlyTickItemsInHand) {
+            this.getMainHandItem().inventoryTick(this.level(), this, EquipmentSlot.MAINHAND);
+            this.getOffhandItem().inventoryTick(this.level(), this, EquipmentSlot.OFFHAND);
+        } else {
         this.inventory.tick();
+        }
+        // Canvas end
         this.oBob = this.bob;
         if (this.abilities.flying && !this.isPassenger()) {
             this.resetFallDistance();
@@ -1343,6 +_,13 @@
                                 }
 
                                 if (!cancelled) {
+                                    // Canvas start - flush location while knockback
+                                    if (Config.INSTANCE.entities.flushKnockback && target instanceof ServerPlayer targetPlayer && this instanceof ServerPlayer player1) {
+                                        targetPlayer.connection.send(net.minecraft.network.protocol.game.ClientboundEntityPositionSyncPacket.of(this));
+                                        player1.connection.send(new net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket(targetPlayer));
+                                        player1.connection.send(net.minecraft.network.protocol.game.ClientboundEntityPositionSyncPacket.of(targetPlayer));
+                                    }
+                                    // Canvas end
                                 ((ServerPlayer)target).connection.send(new ClientboundSetEntityMotionPacket(target));
                                 target.hurtMarked = false;
                                 target.setDeltaMovement(deltaMovement);
