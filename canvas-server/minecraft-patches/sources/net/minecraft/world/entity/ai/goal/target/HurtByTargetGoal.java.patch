--- a/net/minecraft/world/entity/ai/goal/target/HurtByTargetGoal.java
+++ b/net/minecraft/world/entity/ai/goal/target/HurtByTargetGoal.java
@@ -73,6 +_,46 @@
     protected void alertOthers() {
         double followDistance = this.getFollowDistance();
         AABB aabb = AABB.unitCubeFromLowerCorner(this.mob.position()).inflate(followDistance, 10.0, followDistance);
+
+        // Canvas start - Async target finding
+        if (io.canvasmc.canvas.Config.INSTANCE.entities.asyncTargetFinding.alertOther) {
+            final var self = this.mob;
+            final var ctx = self.getGoalCtx();
+            if (!ctx.state) return;
+            final var serverLevel = getServerLevel(self);
+            final var toIgnoreAlert = this.toIgnoreAlert;
+            ctx.wake = () -> {
+                var toAlert = new java.util.ArrayList<Mob>();
+                List<? extends Mob> entitiesOfClass = serverLevel
+                    .getEntitiesOfClass(self.getClass(), aabb, EntitySelector.NO_SPECTATORS);
+                for (Mob mob : entitiesOfClass) {
+                    if (self == mob
+                        || mob.getTarget() != null
+                        || (self instanceof TamableAnimal && ((TamableAnimal) self).getOwner() != ((TamableAnimal) mob).getOwner())
+                        || mob.isAlliedTo(self.getLastHurtByMob())) {
+                        continue;
+                    }
+                    if (toIgnoreAlert == null) {
+                        toAlert.add(mob);
+                        continue;
+                    }
+                    boolean flag = false;
+                    for (Class<?> clazz : toIgnoreAlert) {
+                        if (mob.getClass() == clazz) {
+                            flag = true;
+                            break;
+                        }
+                    }
+                    if (!flag) {
+                        toAlert.add(mob);
+                    }
+                }
+                return toAlert;
+            };
+            return;
+        }
+        // Canvas end - Async target finding
+
         List<? extends Mob> entitiesOfClass = this.mob
             .level()
             .getEntitiesOfClass((Class<? extends Mob>)this.mob.getClass(), aabb, EntitySelector.NO_SPECTATORS);
@@ -112,6 +_,36 @@
             this.alertOther(mob, this.mob.getLastHurtByMob());
         }
     }
+
+    // Canvas start - Async target finding
+    public void poll() {
+        if (!(this.mob.getGoalCtx().result() instanceof List<?> toAlert)) return;
+        LivingEntity lastHurtByMob = this.mob.getLastHurtByMob();
+        if (lastHurtByMob == null || (lastHurtByMob.getType() == EntityType.PLAYER && getServerLevel(this.mob).getGameRules().getBoolean(GameRules.RULE_UNIVERSAL_ANGER))) {
+            return;
+        }
+        for (Class<?> clazz : this.toIgnoreDamage) {
+            if (clazz.isAssignableFrom(lastHurtByMob.getClass())) {
+                return;
+            }
+        }
+        if (this.mob.getTarget() == null) {
+            return;
+        }
+        if (!canContinueToUse()) {
+            return;
+        }
+        if (!this.canAttack(lastHurtByMob, HURT_BY_TARGETING)) {
+            return;
+        }
+        for (var obj : toAlert) {
+            Mob mob = (Mob) obj;
+            if (mob.getTarget() == null) {
+                alertOther(mob, lastHurtByMob);
+            }
+        }
+    }
+    // Canvas end - Async target finding
 
     protected void alertOther(Mob mob, LivingEntity target) {
         mob.setTarget(target, org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_ATTACKED_NEARBY_ENTITY); // CraftBukkit - reason
