--- a/net/minecraft/world/entity/ai/attributes/AttributeMap.java
+++ b/net/minecraft/world/entity/ai/attributes/AttributeMap.java
@@ -2,21 +_,21 @@
 
 import com.google.common.collect.Multimap;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
-import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ReferenceSets;
 import net.minecraft.core.Holder;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.resources.ResourceLocation;
 
 public class AttributeMap {
-    private final Map<Holder<Attribute>, AttributeInstance> attributes = new Object2ObjectOpenHashMap<>();
-    private final Set<AttributeInstance> attributesToSync = new ObjectOpenHashSet<>();
-    private final Set<AttributeInstance> attributesToUpdate = new ObjectOpenHashSet<>();
+    private final Map<Holder<Attribute>, AttributeInstance> attributes = new io.canvasmc.canvas.util.AttributeInstanceArrayMap(); // Canvas - threaded tracker
+    private final io.canvasmc.canvas.util.AttributeInstanceSet attributesToSync = new io.canvasmc.canvas.util.AttributeInstanceSet((io.canvasmc.canvas.util.AttributeInstanceArrayMap) attributes); // Canvas - threaded tracker
+    private final io.canvasmc.canvas.util.AttributeInstanceSet attributesToUpdate = new io.canvasmc.canvas.util.AttributeInstanceSet((io.canvasmc.canvas.util.AttributeInstanceArrayMap) attributes); // Canvas - threaded tracker
     private final AttributeSupplier supplier;
     private final net.minecraft.world.entity.LivingEntity entity; // Purpur - Ridables
 
@@ -30,20 +_,33 @@
         this.supplier = defaultAttributes;
     }
 
-    private void onAttributeModified(AttributeInstance instance) {
+    // Canvas start - threaded tracker
+    private synchronized void onAttributeModified(AttributeInstance instance) {
         this.attributesToUpdate.add(instance);
         if (instance.getAttribute().value().isClientSyncable() && (entity == null || entity.shouldSendAttribute(instance.getAttribute().value()))) { // Purpur - Ridables
             this.attributesToSync.add(instance);
         }
     }
 
-    public Set<AttributeInstance> getAttributesToSync() {
-        return this.attributesToSync;
-    }
-
-    public Set<AttributeInstance> getAttributesToUpdate() {
-        return this.attributesToUpdate;
-    }
+    private static final AttributeInstance[] EMPTY_ATTRIBUTE_INSTANCE = new AttributeInstance[0];
+    public synchronized Set<AttributeInstance> getAttributesToSync() {
+        var clone = it.unimi.dsi.fastutil.objects.ReferenceArraySet.ofUnchecked(attributesToSync.toArray(EMPTY_ATTRIBUTE_INSTANCE));
+        this.attributesToSync.clear();
+        return clone;
+    }
+
+    public synchronized Set<AttributeInstance> getAttributesToUpdate() {
+        var clone = it.unimi.dsi.fastutil.objects.ReferenceArraySet.ofUnchecked(attributesToUpdate.toArray(EMPTY_ATTRIBUTE_INSTANCE));
+        this.attributesToUpdate.clear();
+        return clone;
+    }
+
+    public synchronized int[] getAttributesToUpdateIds() {
+        int[] clone = attributesToUpdate.inner.toIntArray();
+        this.attributesToUpdate.clear();
+        return clone;
+    }
+    // Canvas end - threaded tracker
 
     public Collection<AttributeInstance> getSyncableAttributes() {
         return this.attributes.values().stream().filter(instance -> instance.getAttribute().value().isClientSyncable() && (entity == null || entity.shouldSendAttribute(instance.getAttribute().value()))).collect(Collectors.toList()); // Purpur - Ridables
@@ -51,7 +_,17 @@
 
     @Nullable
     public AttributeInstance getInstance(Holder<Attribute> attribute) {
-        return this.attributes.computeIfAbsent(attribute, holder -> this.supplier.createInstance(this::onAttributeModified, (Holder<Attribute>)holder));
+        // Canvas start - optimize
+        AttributeInstance v;
+        if ((v = this.attributes.get(attribute)) == null) {
+            AttributeInstance newValue;
+            if ((newValue = this.supplier.createInstance(this::onAttributeModified, attribute)) != null) {
+                this.attributes.put(attribute, newValue);
+                return newValue;
+            }
+        }
+        return v;
+        // Canvas end
     }
 
     public boolean hasAttribute(Holder<Attribute> attribute) {
@@ -140,9 +_,11 @@
     public ListTag save() {
         ListTag listTag = new ListTag();
 
-        for (AttributeInstance attributeInstance : this.attributes.values()) {
+        // Canvas start
+        this.attributes.forEach((_, attributeInstance) -> {
             listTag.add(attributeInstance.save());
-        }
+        });
+        // Canvas end
 
         return listTag;
     }
