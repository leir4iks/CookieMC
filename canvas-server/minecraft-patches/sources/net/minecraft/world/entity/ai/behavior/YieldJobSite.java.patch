--- a/net/minecraft/world/entity/ai/behavior/YieldJobSite.java
+++ b/net/minecraft/world/entity/ai/behavior/YieldJobSite.java
@@ -33,28 +_,37 @@
                         } else if (!villager.getVillagerData().profession().is(VillagerProfession.NONE)) {
                             return false;
                         } else {
-                            BlockPos blockPos = instance.<GlobalPos>get(potentialJobSite).pos();
+                            // Canvas start - Threaded Regions
+                            GlobalPos globalPos = instance.get(potentialJobSite);
+                            BlockPos blockPos = globalPos.pos();
+                            if (globalPos.dimension() != level.dimension() || !io.canvasmc.canvas.region.ServerRegions.isTickThreadFor(level, blockPos)) {
+                                return true;
+                            }
+                            // Canvas end
                             Optional<Holder<PoiType>> type = level.getPoiManager().getType(blockPos);
                             if (type.isEmpty()) {
                                 return true;
                             } else {
-                                instance.<List<LivingEntity>>get(nearestLivingEntities)
-                                    .stream()
-                                    .filter(nearEntity -> nearEntity instanceof Villager && nearEntity != villager)
-                                    .map(nearEntity -> (Villager)nearEntity)
-                                    .filter(LivingEntity::isAlive)
-                                    .filter(nearVillager -> nearbyWantsJobsite(type.get(), nearVillager, blockPos))
-                                    .findFirst()
-                                    .ifPresent(nearVillager -> {
-                                        walkTarget.erase();
-                                        lookTarget.erase();
-                                        potentialJobSite.erase();
-                                        if (nearVillager.getBrain().getMemory(MemoryModuleType.JOB_SITE).isEmpty()) {
-                                            BehaviorUtils.setWalkAndLookTargetMemories(nearVillager, blockPos, speedModifier, 1);
-                                            nearVillager.getBrain().setMemory(MemoryModuleType.POTENTIAL_JOB_SITE, GlobalPos.of(level.dimension(), blockPos));
-                                            DebugPackets.sendPoiTicketCountPacket(level, blockPos);
+                                // Canvas start - Remove stream in YieldJobSite
+                                List<LivingEntity> mobsList = instance.get(nearestLivingEntities);
+                                for (LivingEntity nearEntity : mobsList) {
+                                    if (nearEntity instanceof Villager nearVillager && nearEntity != villager && nearEntity.isAlive()) {
+                                        if (nearbyWantsJobsite(type.get(), nearVillager, blockPos)) {
+                                            walkTarget.erase();
+                                            lookTarget.erase();
+                                            potentialJobSite.erase();
+
+                                            if (nearVillager.getBrain().getMemory(MemoryModuleType.JOB_SITE).isEmpty()) {
+                                                BehaviorUtils.setWalkAndLookTargetMemories(nearVillager, blockPos, speedModifier, 1);
+                                                nearVillager.getBrain().setMemory(MemoryModuleType.POTENTIAL_JOB_SITE, GlobalPos.of(level.dimension(), blockPos));
+                                                DebugPackets.sendPoiTicketCountPacket(level, blockPos);
+                                            }
+
+                                            break;
                                         }
-                                    });
+                                    }
+                                }
+                                // Canvas end - Remove stream in YieldJobSite
                                 return true;
                             }
                         }
