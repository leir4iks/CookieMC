--- a/net/minecraft/world/level/EntityGetter.java
+++ b/net/minecraft/world/level/EntityGetter.java
@@ -6,6 +_,7 @@
 import java.util.UUID;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
+import net.minecraft.core.BlockPos;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.player.Player;
@@ -30,6 +_,15 @@
         return this.getEntities(entity, area, EntitySelector.NO_SPECTATORS);
     }
 
+    // Canvas start - Threaded Regions
+    default List<? extends Player> getLocalPlayers() {
+        return java.util.Collections.emptyList();
+    }
+
+    default List<? extends Player> getLocalPlayers(ChunkPos pos) {
+        return java.util.Collections.emptyList();
+    }
+    // Canvas end
     // Paper start - rewrite chunk system
     @Override
     default List<Entity> moonrise$getHardCollidingEntities(final Entity entity, final AABB box, final Predicate<? super Entity> predicate) {
@@ -120,20 +_,39 @@
 
     @Nullable
     default Player getNearestPlayer(double x, double y, double z, double distance, @Nullable Predicate<Entity> predicate) {
-        double d = -1.0;
+        // Canvas start - optimize getNearestPlayer
+        if (distance < 0.0) {
+            distance = Double.MAX_VALUE;
+        } else {
+            distance = distance * distance;
+        }
+
         Player player = null;
+        List<? extends Player> players = this.getLocalPlayers(new ChunkPos(new BlockPos((int) Math.round(x), (int) Math.round(y), (int) Math.round(z)))); // Canvas - Threaded Regions
 
-        for (Player player1 : this.players()) {
-            if (predicate == null || predicate.test(player1)) {
+        if (predicate == null) {
+            for (int i = 0; i < players.size(); i++) {
+                Player player1 = players.get(i);
                 double d1 = player1.distanceToSqr(x, y, z);
-                if ((distance < 0.0 || d1 < distance * distance) && (d == -1.0 || d1 < d)) {
-                    d = d1;
-                    player = player1;
+                if (d1 < distance) {
+                    distance = d1;
+                }
+            }
+        } else {
+            for (int i = 0; i < players.size(); i++) {
+                Player player1 = players.get(i);
+                if (predicate.test(player1)) {
+                    double d1 = player1.distanceToSqr(x, y, z);
+                    if (d1 < distance) {
+                        distance = d1;
+                        player = player1;
+                    }
                 }
             }
         }
 
         return player;
+        // Canvas end
     }
 
     // Paper start
@@ -144,7 +_,7 @@
     default List<org.bukkit.entity.HumanEntity> findNearbyBukkitPlayers(double x, double y, double z, double radius, @Nullable Predicate<Entity> predicate) {
         com.google.common.collect.ImmutableList.Builder<org.bukkit.entity.HumanEntity> builder = com.google.common.collect.ImmutableList.builder();
 
-        for (Player human : this.players()) {
+        for (Player human : this.getLocalPlayers(new ChunkPos(new BlockPos((int) Math.round(x), (int) Math.round(y), (int) Math.round(z))))) { // Canvas - Threaded Regions
             if (predicate == null || predicate.test(human)) {
                 double distanceSquared = human.distanceToSqr(x, y, z);
 
@@ -171,7 +_,7 @@
 
     // Paper start - Affects Spawning API
     default boolean hasNearbyAlivePlayerThatAffectsSpawning(double x, double y, double z, double range) {
-        for (Player player : this.players()) {
+        for (Player player : this.getLocalPlayers(new ChunkPos(new BlockPos((int) Math.round(x), (int) Math.round(y), (int) Math.round(z))))) { // Canvas - Threaded Regions
             if (EntitySelector.PLAYER_AFFECTS_SPAWNING.test(player)) { // combines NO_SPECTATORS and LIVING_ENTITY_STILL_ALIVE with an "affects spawning" check
                 double distanceSqr = player.distanceToSqr(x, y, z);
                 if (range < 0.0D || distanceSqr < range * range) {
@@ -184,7 +_,7 @@
     // Paper end - Affects Spawning API
 
     default boolean hasNearbyAlivePlayer(double x, double y, double z, double distance) {
-        for (Player player : this.players()) {
+        for (Player player : this.getLocalPlayers(new ChunkPos(new BlockPos((int) Math.round(x), (int) Math.round(y), (int) Math.round(z))))) { // Canvas - Threaded Regions
             if (EntitySelector.NO_SPECTATORS.test(player) && EntitySelector.LIVING_ENTITY_STILL_ALIVE.test(player) && EntitySelector.notAfk.test(player)) { // Purpur - AFK API
                 double d = player.distanceToSqr(x, y, z);
                 if (distance < 0.0 || d < distance * distance) {
@@ -198,8 +_,7 @@
 
     @Nullable
     default Player getPlayerByUUID(UUID uniqueId) {
-        for (int i = 0; i < this.players().size(); i++) {
-            Player player = this.players().get(i);
+        for (Player player : this.getLocalPlayers()) { // Canvas - Threaded Regions
             if (uniqueId.equals(player.getUUID())) {
                 return player;
             }
