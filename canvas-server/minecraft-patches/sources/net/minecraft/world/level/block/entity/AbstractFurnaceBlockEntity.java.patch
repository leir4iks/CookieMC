--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -37,9 +_,10 @@
 import net.minecraft.world.level.block.AbstractFurnaceBlock;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.phys.Vec3;
 
-public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeCraftingHolder, StackedContentsCompatible {
+public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeCraftingHolder, StackedContentsCompatible, io.canvasmc.canvas.entity.SleepingBlockEntity { // Canvas - block entity sleeping
     protected static final int SLOT_INPUT = 0;
     protected static final int SLOT_FUEL = 1;
     protected static final int SLOT_RESULT = 2;
@@ -106,6 +_,38 @@
     private final RecipeManager.CachedCheck<SingleRecipeInput, ? extends AbstractCookingRecipe> quickCheck;
     public final RecipeType<? extends AbstractCookingRecipe> recipeType; // Paper - cook speed multiplier API
     public double cookSpeedMultiplier = 1.0; // Paper - cook speed multiplier API
+    // Canvas start
+    private LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = null;
+    private TickingBlockEntity sleepingTicker = null;
+
+    @Override
+    public LevelChunk.RebindableTickingBlockEntityWrapper lithium$getTickWrapper() {
+        return tickWrapper;
+    }
+
+    @Override
+    public void lithium$setTickWrapper(LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper) {
+        this.tickWrapper = tickWrapper;
+        this.lithium$setSleepingTicker(null);
+    }
+
+    @Override
+    public TickingBlockEntity lithium$getSleepingTicker() {
+        return sleepingTicker;
+    }
+
+    @Override
+    public void lithium$setSleepingTicker(TickingBlockEntity sleepingTicker) {
+        this.sleepingTicker = sleepingTicker;
+    }
+
+    @Override
+    public void lithium$handleSetChanged() {
+        if (this.isSleeping() && this.level != null && !this.level.isClientSide) {
+            this.wakeUpNow();
+        }
+    }
+    // Canvas end
 
     protected AbstractFurnaceBlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState blockState, RecipeType<? extends AbstractCookingRecipe> recipeType) {
         super(type, pos, blockState);
@@ -164,6 +_,11 @@
         this.recipesUsed.clear();
         this.recipesUsed.putAll(tag.read("RecipesUsed", RECIPES_USED_CODEC).orElse(Map.of()));
         this.cookSpeedMultiplier = tag.getDoubleOr("Paper.CookSpeedMultiplier", 1); // Paper - cook speed multiplier API
+        // Canvas start - block entity sleeping
+        if (this.isSleeping() && this.level != null && !this.level.isClientSide) {
+            this.wakeUpNow();
+        }
+        // Canvas end
     }
 
     @Override
@@ -179,6 +_,7 @@
     }
 
     public static void serverTick(ServerLevel level, BlockPos pos, BlockState state, AbstractFurnaceBlockEntity furnace) {
+        if (furnace.isSleeping()) return; // Canvas - sleeping block entities
         boolean isLit = furnace.isLit();
         boolean flag = false;
         if (furnace.isLit()) {
@@ -286,7 +_,16 @@
         }
 
         if (usedLavaFromUnderneath) furnace.items.set(1, ItemStack.EMPTY); // Purpur - Furnace uses lava from underneath
-    }
+        furnace.checkSleep(state); // Canvas
+    }
+    // Canvas start
+
+    private void checkSleep(BlockState state) {
+        if (!this.isLit() && this.cookingTimer == 0 && (state.is(Blocks.FURNACE) || state.is(Blocks.BLAST_FURNACE) || state.is(Blocks.SMOKER)) && this.level != null) {
+            this.lithium$startSleeping();
+        }
+    }
+    // Canvas end
 
     private static boolean canBurn(
         RegistryAccess registryAccess,
