--- a/net/minecraft/world/level/levelgen/PatrolSpawner.java
+++ b/net/minecraft/world/level/levelgen/PatrolSpawner.java
@@ -1,5 +_,6 @@
 package net.minecraft.world.level.levelgen;
 
+import io.canvasmc.canvas.region.ServerRegions;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.server.level.ServerLevel;
@@ -16,7 +_,7 @@
 import net.minecraft.world.level.block.state.BlockState;
 
 public class PatrolSpawner implements CustomSpawner {
-    private int nextTick;
+    // private int nextTick; // Canvas - Threaded Regions
 
     @Override
     public void tick(ServerLevel level, boolean spawnEnemies, boolean spawnFriendlies) {
@@ -24,14 +_,15 @@
         if (spawnEnemies) {
             if (level.getGameRules().getBoolean(GameRules.RULE_DO_PATROL_SPAWNING)) {
                 RandomSource randomSource = level.random;
+                ServerRegions.WorldTickData tickData = ServerRegions.getTickData(level); // Canvas - Threaded Regions
                 // this.nextTick--;
                 // Paper start - Pillager patrol spawn settings and per player options
-                int size = level.players().size();
+                int size = level.getLocalPlayers().size(); // Canvas - Threaded Regions
                 if (size < 1) {
                     return;
                 }
 
-                net.minecraft.server.level.ServerPlayer player = level.players().get(randomSource.nextInt(size));
+                net.minecraft.server.level.ServerPlayer player = level.getLocalPlayers().get(randomSource.nextInt(size)); // Canvas - Threaded Regions
                 if (player.isSpectator()) {
                     return;
                 }
@@ -41,8 +_,8 @@
                     --player.patrolSpawnDelay;
                     patrolSpawnDelay = player.patrolSpawnDelay;
                 } else {
-                    this.nextTick--;
-                    patrolSpawnDelay = this.nextTick;
+                    tickData.patrolSpawnerNextTick--; // Canvas - Threaded Regions
+                    patrolSpawnDelay = tickData.patrolSpawnerNextTick; // Canvas - Threaded Regions
                 }
                 if (patrolSpawnDelay <= 0) {
                     long days;
@@ -54,7 +_,7 @@
                     if (level.paperConfig().entities.behavior.pillagerPatrols.spawnDelay.perPlayer) {
                         player.patrolSpawnDelay += level.paperConfig().entities.behavior.pillagerPatrols.spawnDelay.ticks + randomSource.nextInt(1200);
                     } else {
-                        this.nextTick += level.paperConfig().entities.behavior.pillagerPatrols.spawnDelay.ticks + randomSource.nextInt(1200);
+                        tickData.patrolSpawnerNextTick += level.paperConfig().entities.behavior.pillagerPatrols.spawnDelay.ticks + randomSource.nextInt(1200); // Canvas - Threaded Regions
                     }
 
                     if (days >= level.paperConfig().entities.behavior.pillagerPatrols.start.day && level.isBrightOutside()) {
