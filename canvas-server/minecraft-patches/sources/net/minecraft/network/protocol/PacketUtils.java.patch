--- a/net/minecraft/network/protocol/PacketUtils.java
+++ b/net/minecraft/network/protocol/PacketUtils.java
@@ -2,14 +_,24 @@
 
 import com.mojang.logging.LogUtils;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.region.ServerRegions;
+import io.papermc.paper.threadedregions.ThreadedRegionizer;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.network.PacketListener;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.RunningOnDifferentThreadException;
+import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.level.TicketType;
+import net.minecraft.server.network.ServerConfigurationPacketListenerImpl;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
+import net.minecraft.server.network.ServerLoginPacketListenerImpl;
 import net.minecraft.util.thread.BlockableEventLoop;
 import org.slf4j.Logger;
+import java.util.Objects;
 
 public class PacketUtils {
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -19,10 +_,10 @@
     }
 
     public static <T extends PacketListener> void ensureRunningOnSameThread(Packet<T> packet, T processor, BlockableEventLoop<?> executor) throws RunningOnDifferentThreadException {
-        if (!executor.isSameThread()) {
-            executor.executeIfPossible(() -> {
-                packetProcessing.push(processor); // Paper - detailed watchdog information
-                try { // Paper - detailed watchdog information
+        // Canvas start
+        if (!ca.spottedleaf.moonrise.common.util.TickThread.isTickThread()) {
+            Runnable run = () -> {
+        // Canvas end
                 if (processor instanceof net.minecraft.server.network.ServerCommonPacketListenerImpl serverCommonPacketListener && serverCommonPacketListener.processedDisconnect) return; // Paper - Don't handle sync packets for kicked players
                 if (processor.shouldHandleMessage(packet)) {
                     try {
@@ -37,13 +_,24 @@
                 } else {
                     LOGGER.debug("Ignoring packet due to disconnection: {}", packet);
                 }
-                // Paper start - detailed watchdog information
-                } finally {
-                    totalMainThreadPacketsProcessed.getAndIncrement();
-                    packetProcessing.pop();
-                }
-                // Paper end - detailed watchdog information
-            });
+            // Canvas start
+            };
+            if (processor instanceof ServerGamePacketListenerImpl gamePacketListener) {
+                // check if removed. if the player is removed, the bukkit task
+                // scheduler will NOT process the tick, so as fallback, run on world
+                gamePacketListener.player.serverLevel().wake();
+                gamePacketListener.player.connection.connection.schedulePacket(run);
+            } else if (processor instanceof ServerConfigurationPacketListenerImpl configurationPacketListener) {
+                // push to main
+                configurationPacketListener.player.serverLevel().wake();
+                configurationPacketListener.connection.schedulePacket(run);
+            } else if (processor instanceof ServerLoginPacketListenerImpl) {
+                // push on main
+                MinecraftServer.getServer().executeIfPossible(run);
+            } else {
+                throw new UnsupportedOperationException("Unknown listener: " + processor);
+            }
+            // Canvas end
             throw RunningOnDifferentThreadException.RUNNING_ON_DIFFERENT_THREAD;
         }
     }
@@ -69,22 +_,4 @@
 
         packetListener.fillCrashReport(crashReport);
     }
-
-    // Paper start - detailed watchdog information
-    public static final java.util.concurrent.ConcurrentLinkedDeque<PacketListener> packetProcessing = new java.util.concurrent.ConcurrentLinkedDeque<>();
-    static final java.util.concurrent.atomic.AtomicLong totalMainThreadPacketsProcessed = new java.util.concurrent.atomic.AtomicLong();
-
-    public static long getTotalProcessedPackets() {
-        return totalMainThreadPacketsProcessed.get();
-    }
-
-    public static java.util.List<PacketListener> getCurrentPacketProcessors() {
-        java.util.List<PacketListener> listeners = new java.util.ArrayList<>(4);
-        for (PacketListener listener : packetProcessing) {
-            listeners.add(listener);
-        }
-
-        return listeners;
-    }
-    // Paper end - detailed watchdog information
 }
