--- a/net/minecraft/util/Mth.java
+++ b/net/minecraft/util/Mth.java
@@ -4,6 +_,8 @@
 import java.util.UUID;
 import java.util.function.IntPredicate;
 import java.util.stream.IntStream;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.util.CompactSineLUT;
 import net.minecraft.Util;
 import net.minecraft.core.Vec3i;
 import net.minecraft.world.phys.AABB;
@@ -29,7 +_,7 @@
     public static final Vector3f Y_AXIS = new Vector3f(0.0F, 1.0F, 0.0F);
     public static final Vector3f X_AXIS = new Vector3f(1.0F, 0.0F, 0.0F);
     public static final Vector3f Z_AXIS = new Vector3f(0.0F, 0.0F, 1.0F);
-    private static final float[] SIN = Util.make(new float[65536], floats -> {
+    public static final float[] SIN = Util.make(new float[65536], floats -> { // Canvas - private -> public
         for (int i1 = 0; i1 < floats.length; i1++) {
             floats[i1] = (float)Math.sin(i1 * Math.PI * 2.0 / 65536.0);
         }
@@ -45,11 +_,23 @@
     private static final double[] ASIN_TAB = new double[257];
     private static final double[] COS_TAB = new double[257];
 
+    // Canvas start
+    static {
+        CompactSineLUT.init();
+    }
+
     public static float sin(float value) {
+        if (Config.INSTANCE.useCompactSineLUT) {
+            return CompactSineLUT.sin(value);
+        }
         return SIN[(int)(value * 10430.378F) & 65535];
     }
 
     public static float cos(float value) {
+        if (Config.INSTANCE.useCompactSineLUT) {
+            return CompactSineLUT.cos(value);
+        }
+    // Canvas end
         return SIN[(int)(value * 10430.378F + 16384.0F) & 65535];
     }
 
@@ -58,18 +_,15 @@
     }
 
     public static int floor(float value) {
-        int i = (int)value;
-        return value < i ? i - 1 : i;
+        return (int) Math.floor(value); // Canvas - use platform math
     }
 
     public static int floor(double value) {
-        int i = (int)value;
-        return value < i ? i - 1 : i;
+        return (int) Math.floor(value); // Canvas - use platform math
     }
 
     public static long lfloor(double value) {
-        long l = (long)value;
-        return value < l ? l - 1L : l;
+        return (long) Math.floor(value); // Canvas - use platform math
     }
 
     public static float abs(float value) {
@@ -81,13 +_,11 @@
     }
 
     public static int ceil(float value) {
-        int i = (int)value;
-        return value > i ? i + 1 : i;
+        return (int) Math.ceil(value); // Canvas - use platform math
     }
 
     public static int ceil(double value) {
-        int i = (int)value;
-        return value > i ? i + 1 : i;
+        return (int) Math.ceil(value); // Canvas - use platform math
     }
 
     public static int clamp(int value, int min, int max) {
@@ -123,15 +_,7 @@
     }
 
     public static double absMax(double x, double y) {
-        if (x < 0.0) {
-            x = -x;
-        }
-
-        if (y < 0.0) {
-            y = -y;
-        }
-
-        return Math.max(x, y);
+        return Math.max(Math.abs(x), Math.abs(y)); // Canvas - use platform math
     }
 
     public static int floorDiv(int dividend, int divisor) {
