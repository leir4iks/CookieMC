--- a/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
+++ b/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
@@ -9,7 +9,7 @@
 import org.bukkit.entity.Player;
 
 public class TPSBarTask extends BossBarTask {
-    public static final ThreadLocal<java.text.DecimalFormat> TWO_DECIMAL_PLACES = ThreadLocal.withInitial(() -> new java.text.DecimalFormat("#,##0.00")); // Canvas - Threaded Regions
+    public static final ThreadLocal<java.text.DecimalFormat> TWO_DECIMAL_PLACES = ThreadLocal.withInitial(() -> new java.text.DecimalFormat("0.00")); // Canvas - Threaded Regions
     private static TPSBarTask instance;
-    private double tps = 20.0D;
-    private double mspt = 0.0D;
+    // private double tps = 20.0D; // Canvas - Threaded Server - localize
+    // private double mspt = 0.0D; // Canvas - Threaded Server - localize
     private int tick = 0;
 
     public static TPSBarTask instance() {
@@ -23,28 +23,37 @@
 
     @Override
     void updateBossBar(BossBar bossbar, Player player) {
-        bossbar.progress(getBossBarProgress());
-        bossbar.color(getBossBarColor());
-        bossbar.name(MiniMessage.miniMessage().deserialize(PurpurConfig.commandTPSBarTitle,
-                Placeholder.component("tps", getTPSColor()),
-                Placeholder.component("mspt", getMSPTColor()),
+        // Canvas start - Threaded Server
+        io.canvasmc.canvas.LevelAccess levelAccess = player.getWorld().getLevelAccess();
+        final int chunkX = player.getLocation().getBlockX() >> 4;
+        final int chunkZ = player.getLocation().getBlockZ() >> 4;
+        io.canvasmc.canvas.region.Region region = Bukkit.getThreadedServer().getRegionAtChunk(
+            levelAccess.getWorld(), chunkX, chunkZ
+        );
+        double tps = player.getServer().isRegionized() ?
+                (region == null ? -1 : region.getTickHandle().getTps5s().getAverage()) :
+                levelAccess.getTps5s().getAverage();
+
+        double mspt = player.getServer().isRegionized() ?
+                (region == null ? -1 : region.getTickHandle().getTickTimes5s().getAverage()) :
+                levelAccess.getTickTimes5s().getAverage();
+
+        BossBar.Color barColor;
+        if (mspt < 35.0D) {
+            barColor = BossBar.Color.BLUE;
+        } else if (mspt < 45.0D) {
+            barColor = BossBar.Color.YELLOW;
+        } else {
+            barColor = BossBar.Color.RED;
+        }
+
+        bossbar.progress(getBossBarProgress(tps, mspt));
+        bossbar.color(barColor);
+        bossbar.name(MiniMessage.miniMessage().deserialize(
+            "<gray>" + (player.getServer().isRegionized() ? "Region" : "World") +
+                " TPS<yellow>:</yellow> <tps> " + (player.getServer().isRegionized() ? "Region" : "World") +
+                " MSPT<yellow>:</yellow> <mspt> Ping<yellow>:</yellow> <ping>ms",
+                Placeholder.component("tps", getTPSColor(tps)),
+                Placeholder.component("mspt", getMSPTColor(mspt)),
+        // Canvas end
                 Placeholder.component("ping", getPingColor(player.getPing()))
         ));
     }
@@ -56,20 +65,21 @@
         }
         tick = 0;
 
-        this.tps = Math.max(Math.min(Bukkit.getTPS()[0], 20.0D), 0.0D);
-        this.mspt = Bukkit.getAverageTickTime();
+        // this.tps = Math.max(Math.min(Bukkit.getTPS()[0], 20.0D), 0.0D); // Canvas - Threaded Server - localize
+        // this.mspt = Bukkit.getAverageTickTime(); // Canvas - Threaded Server - localize
 
         super.run();
     }
 
-    private float getBossBarProgress() {
+    private float getBossBarProgress(double tps, double mspt) { // Canvas - Threaded Server
         if (PurpurConfig.commandTPSBarProgressFillMode == FillMode.MSPT) {
-            return Math.max(Math.min((float) mspt / 50.0F, 1.0F), 0.0F);
+            return Math.max(Math.min((float) mspt / ((float) io.canvasmc.canvas.ThreadedBukkitServer.getInstance().getScheduler().getTimeBetweenTicks() / 1_000_000), 1.0F), 0.0F); // Canvas - Threaded Server
         } else {
-            return Math.max(Math.min((float) tps / 20.0F, 1.0F), 0.0F);
+            return Math.max(Math.min((float) tps / io.canvasmc.canvas.ThreadedBukkitServer.getInstance().getScheduler().getTickRate(), 1.0F), 0.0F); // Canvas - Threaded Server
         }
     }
 
+    /* // Canvas - Threaded Server
     private BossBar.Color getBossBarColor() {
         if (isGood(PurpurConfig.commandTPSBarProgressFillMode)) {
             return PurpurConfig.commandTPSBarProgressColorGood;
@@ -111,42 +121,29 @@
             return false;
         }
     }
+     */ // Canvas - Threaded Server
 
-    private Component getTPSColor() {
-        String color;
-        if (isGood(FillMode.TPS)) {
-            color = PurpurConfig.commandTPSBarTextColorGood;
-        } else if (isMedium(FillMode.TPS)) {
-            color = PurpurConfig.commandTPSBarTextColorMedium;
-        } else {
-            color = PurpurConfig.commandTPSBarTextColorLow;
-        }
-        return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%.2f", tps)));
+    // Canvas start - Threaded Server
+    private Component getTPSColor(double tps) {
+        net.kyori.adventure.text.format.TextColor textColor =
+            io.canvasmc.canvas.command.ThreadedServerHealthDump.getColorForTPS(tps);
+        return Component.text(TWO_DECIMAL_PLACES.get().format(tps), textColor);
     }
 
-    private Component getMSPTColor() {
-        String color;
-        if (isGood(FillMode.MSPT)) {
-            color = PurpurConfig.commandTPSBarTextColorGood;
-        } else if (isMedium(FillMode.MSPT)) {
-            color = PurpurConfig.commandTPSBarTextColorMedium;
-        } else {
-            color = PurpurConfig.commandTPSBarTextColorLow;
+    private Component getMSPTColor(double mspt) {
+        net.kyori.adventure.text.format.TextColor textColor;
+        if (mspt < 35.0D) {
+            textColor = net.kyori.adventure.text.format.NamedTextColor.AQUA;
+        } else if (mspt < 45.0D) {
+            textColor = net.kyori.adventure.text.format.NamedTextColor.GOLD;
+        } else {
+            textColor = net.kyori.adventure.text.format.NamedTextColor.RED;
         }
-        return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%.2f", mspt)));
+        return Component.text(TWO_DECIMAL_PLACES.get().format(mspt), textColor);
     }
 
     private Component getPingColor(int ping) {
-        String color;
-        if (isGood(FillMode.PING, ping)) {
-            color = PurpurConfig.commandTPSBarTextColorGood;
-        } else if (isMedium(FillMode.PING, ping)) {
-            color = PurpurConfig.commandTPSBarTextColorMedium;
-        } else {
-            color = PurpurConfig.commandTPSBarTextColorLow;
-        }
-        return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%s", ping)));
+        net.kyori.adventure.text.format.TextColor textColor =
+            io.canvasmc.canvas.command.ThreadedServerHealthDump.getColorForPing(ping);
+        return Component.text(ping, textColor);
     }
+    // Canvas end
 
     public enum FillMode {
         TPS, MSPT, PING
